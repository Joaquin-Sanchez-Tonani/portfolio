{"ast":null,"code":"import { isBigNumber, isString, typeOf } from './is.js';\nimport { format as formatNumber } from './number.js';\nimport { format as formatBigNumber } from './bignumber/formatter.js';\n\n/**\r\n * Check if a text ends with a certain string.\r\n * @param {string} text\r\n * @param {string} search\r\n */\nexport function endsWith(text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return text.substring(start, end) === search;\n}\n\n/**\r\n * Format a value of any type into a string.\r\n *\r\n * Usage:\r\n *     math.format(value)\r\n *     math.format(value, precision)\r\n *     math.format(value, options)\r\n *\r\n * When value is a function:\r\n *\r\n * - When the function has a property `syntax`, it returns this\r\n *   syntax description.\r\n * - In other cases, a string `'function'` is returned.\r\n *\r\n * When `value` is an Object:\r\n *\r\n * - When the object contains a property `format` being a function, this\r\n *   function is invoked as `value.format(options)` and the result is returned.\r\n * - When the object has its own `toString` method, this method is invoked\r\n *   and the result is returned.\r\n * - In other cases the function will loop over all object properties and\r\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\r\n *\r\n * Example usage:\r\n *     math.format(2/7)                // '0.2857142857142857'\r\n *     math.format(math.pi, 3)         // '3.14'\r\n *     math.format(new Complex(2, 3))  // '2 + 3i'\r\n *     math.format('hello')            // '\"hello\"'\r\n *\r\n * @param {*} value             Value to be stringified\r\n * @param {Object | number | Function} [options]\r\n *     Formatting options. See src/utils/number.js:format for a\r\n *     description of the available options controlling number output.\r\n *     This generic \"format\" also supports the option property `truncate: NN`\r\n *     giving the maximum number NN of characters to return (if there would\r\n *     have been more, they are deleted and replaced by an ellipsis).\r\n * @return {string} str\r\n */\nexport function format(value, options) {\n  var result = _format(value, options);\n  if (options && typeof options === 'object' && 'truncate' in options && result.length > options.truncate) {\n    return result.substring(0, options.truncate - 3) + '...';\n  }\n  return result;\n}\nfunction _format(value, options) {\n  if (typeof value === 'number') {\n    return formatNumber(value, options);\n  }\n  if (isBigNumber(value)) {\n    return formatBigNumber(value, options);\n  }\n\n  // note: we use unsafe duck-typing here to check for Fractions, this is\n  // ok here since we're only invoking toString or concatenating its values\n  if (looksLikeFraction(value)) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return value.s * value.n + '/' + value.d;\n    } else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n  if (isString(value)) {\n    return '\"' + value + '\"';\n  }\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n  if (value && typeof value === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    } else if (value && value.toString(options) !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString(options);\n    } else {\n      var entries = Object.keys(value).map(key => {\n        return '\"' + key + '\": ' + format(value[key], options);\n      });\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n  return String(value);\n}\n\n/**\r\n * Stringify a value into a string enclosed in double quotes.\r\n * Unescaped double quotes and backslashes inside the value are escaped.\r\n * @param {*} value\r\n * @return {string}\r\n */\nexport function stringify(value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n  while (i < text.length) {\n    var c = text.charAt(i);\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n      c = text.charAt(i);\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\'; // no valid escape character -> escape it\n      }\n\n      escaped += c;\n    } else if (c === '\"') {\n      escaped += '\\\\\"';\n    } else {\n      escaped += c;\n    }\n    i++;\n  }\n  return '\"' + escaped + '\"';\n}\n\n/**\r\n * Escape special HTML characters\r\n * @param {*} value\r\n * @return {string}\r\n */\nexport function escape(value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return text;\n}\n\n/**\r\n * Recursively format an n-dimensional matrix\r\n * Example output: \"[[1, 2], [3, 4]]\"\r\n * @param {Array} array\r\n * @param {Object | number | Function} [options]  Formatting options. See\r\n *                                                lib/utils/number:format for a\r\n *                                                description of the available\r\n *                                                options.\r\n * @returns {string} str\r\n */\nfunction formatArray(array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n    for (var i = 0; i < len; i++) {\n      if (i !== 0) {\n        str += ', ';\n      }\n      str += formatArray(array[i], options);\n    }\n    str += ']';\n    return str;\n  } else {\n    return format(array, options);\n  }\n}\n\n/**\r\n * Check whether a value looks like a Fraction (unsafe duck-type check)\r\n * @param {*} value\r\n * @return {boolean}\r\n */\nfunction looksLikeFraction(value) {\n  return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\n}\n\n/**\r\n * Compare two strings\r\n * @param {string} x\r\n * @param {string} y\r\n * @returns {number}\r\n */\nexport function compareText(x, y) {\n  // we don't want to convert numbers to string, only accept string input\n  if (!isString(x)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(x) + ', index: 0)');\n  }\n  if (!isString(y)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(y) + ', index: 1)');\n  }\n  return x === y ? 0 : x > y ? 1 : -1;\n}","map":{"version":3,"names":["isBigNumber","isString","typeOf","format","formatNumber","formatBigNumber","endsWith","text","search","start","length","end","substring","value","options","result","_format","truncate","looksLikeFraction","fraction","s","n","d","toString","Array","isArray","formatArray","syntax","String","entries","Object","keys","map","key","join","stringify","escaped","i","c","charAt","indexOf","escape","replace","array","str","len","compareText","x","y","TypeError"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/utils/string.js"],"sourcesContent":["import { isBigNumber, isString, typeOf } from './is.js';\r\nimport { format as formatNumber } from './number.js';\r\nimport { format as formatBigNumber } from './bignumber/formatter.js';\r\n\r\n/**\r\n * Check if a text ends with a certain string.\r\n * @param {string} text\r\n * @param {string} search\r\n */\r\nexport function endsWith(text, search) {\r\n  var start = text.length - search.length;\r\n  var end = text.length;\r\n  return text.substring(start, end) === search;\r\n}\r\n\r\n/**\r\n * Format a value of any type into a string.\r\n *\r\n * Usage:\r\n *     math.format(value)\r\n *     math.format(value, precision)\r\n *     math.format(value, options)\r\n *\r\n * When value is a function:\r\n *\r\n * - When the function has a property `syntax`, it returns this\r\n *   syntax description.\r\n * - In other cases, a string `'function'` is returned.\r\n *\r\n * When `value` is an Object:\r\n *\r\n * - When the object contains a property `format` being a function, this\r\n *   function is invoked as `value.format(options)` and the result is returned.\r\n * - When the object has its own `toString` method, this method is invoked\r\n *   and the result is returned.\r\n * - In other cases the function will loop over all object properties and\r\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\r\n *\r\n * Example usage:\r\n *     math.format(2/7)                // '0.2857142857142857'\r\n *     math.format(math.pi, 3)         // '3.14'\r\n *     math.format(new Complex(2, 3))  // '2 + 3i'\r\n *     math.format('hello')            // '\"hello\"'\r\n *\r\n * @param {*} value             Value to be stringified\r\n * @param {Object | number | Function} [options]\r\n *     Formatting options. See src/utils/number.js:format for a\r\n *     description of the available options controlling number output.\r\n *     This generic \"format\" also supports the option property `truncate: NN`\r\n *     giving the maximum number NN of characters to return (if there would\r\n *     have been more, they are deleted and replaced by an ellipsis).\r\n * @return {string} str\r\n */\r\nexport function format(value, options) {\r\n  var result = _format(value, options);\r\n  if (options && typeof options === 'object' && 'truncate' in options && result.length > options.truncate) {\r\n    return result.substring(0, options.truncate - 3) + '...';\r\n  }\r\n  return result;\r\n}\r\nfunction _format(value, options) {\r\n  if (typeof value === 'number') {\r\n    return formatNumber(value, options);\r\n  }\r\n  if (isBigNumber(value)) {\r\n    return formatBigNumber(value, options);\r\n  }\r\n\r\n  // note: we use unsafe duck-typing here to check for Fractions, this is\r\n  // ok here since we're only invoking toString or concatenating its values\r\n  if (looksLikeFraction(value)) {\r\n    if (!options || options.fraction !== 'decimal') {\r\n      // output as ratio, like '1/3'\r\n      return value.s * value.n + '/' + value.d;\r\n    } else {\r\n      // output as decimal, like '0.(3)'\r\n      return value.toString();\r\n    }\r\n  }\r\n  if (Array.isArray(value)) {\r\n    return formatArray(value, options);\r\n  }\r\n  if (isString(value)) {\r\n    return '\"' + value + '\"';\r\n  }\r\n  if (typeof value === 'function') {\r\n    return value.syntax ? String(value.syntax) : 'function';\r\n  }\r\n  if (value && typeof value === 'object') {\r\n    if (typeof value.format === 'function') {\r\n      return value.format(options);\r\n    } else if (value && value.toString(options) !== {}.toString()) {\r\n      // this object has a non-native toString method, use that one\r\n      return value.toString(options);\r\n    } else {\r\n      var entries = Object.keys(value).map(key => {\r\n        return '\"' + key + '\": ' + format(value[key], options);\r\n      });\r\n      return '{' + entries.join(', ') + '}';\r\n    }\r\n  }\r\n  return String(value);\r\n}\r\n\r\n/**\r\n * Stringify a value into a string enclosed in double quotes.\r\n * Unescaped double quotes and backslashes inside the value are escaped.\r\n * @param {*} value\r\n * @return {string}\r\n */\r\nexport function stringify(value) {\r\n  var text = String(value);\r\n  var escaped = '';\r\n  var i = 0;\r\n  while (i < text.length) {\r\n    var c = text.charAt(i);\r\n    if (c === '\\\\') {\r\n      escaped += c;\r\n      i++;\r\n      c = text.charAt(i);\r\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\r\n        escaped += '\\\\'; // no valid escape character -> escape it\r\n      }\r\n\r\n      escaped += c;\r\n    } else if (c === '\"') {\r\n      escaped += '\\\\\"';\r\n    } else {\r\n      escaped += c;\r\n    }\r\n    i++;\r\n  }\r\n  return '\"' + escaped + '\"';\r\n}\r\n\r\n/**\r\n * Escape special HTML characters\r\n * @param {*} value\r\n * @return {string}\r\n */\r\nexport function escape(value) {\r\n  var text = String(value);\r\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  return text;\r\n}\r\n\r\n/**\r\n * Recursively format an n-dimensional matrix\r\n * Example output: \"[[1, 2], [3, 4]]\"\r\n * @param {Array} array\r\n * @param {Object | number | Function} [options]  Formatting options. See\r\n *                                                lib/utils/number:format for a\r\n *                                                description of the available\r\n *                                                options.\r\n * @returns {string} str\r\n */\r\nfunction formatArray(array, options) {\r\n  if (Array.isArray(array)) {\r\n    var str = '[';\r\n    var len = array.length;\r\n    for (var i = 0; i < len; i++) {\r\n      if (i !== 0) {\r\n        str += ', ';\r\n      }\r\n      str += formatArray(array[i], options);\r\n    }\r\n    str += ']';\r\n    return str;\r\n  } else {\r\n    return format(array, options);\r\n  }\r\n}\r\n\r\n/**\r\n * Check whether a value looks like a Fraction (unsafe duck-type check)\r\n * @param {*} value\r\n * @return {boolean}\r\n */\r\nfunction looksLikeFraction(value) {\r\n  return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\r\n}\r\n\r\n/**\r\n * Compare two strings\r\n * @param {string} x\r\n * @param {string} y\r\n * @returns {number}\r\n */\r\nexport function compareText(x, y) {\r\n  // we don't want to convert numbers to string, only accept string input\r\n  if (!isString(x)) {\r\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(x) + ', index: 0)');\r\n  }\r\n  if (!isString(y)) {\r\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(y) + ', index: 1)');\r\n  }\r\n  return x === y ? 0 : x > y ? 1 : -1;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}