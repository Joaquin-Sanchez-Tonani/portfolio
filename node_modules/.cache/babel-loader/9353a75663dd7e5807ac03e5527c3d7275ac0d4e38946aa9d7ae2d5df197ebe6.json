{"ast":null,"code":"import { applyCallback } from '../../utils/applyCallback.js';\nimport { forEach as forEachArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEach = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.forEach(x, callback)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.forEach([1, 2, 3], function(value) {\r\n   *      console.log(value)\r\n   *    })\r\n   *    // outputs 1, 2, 3\r\n   *\r\n   * See also:\r\n   *\r\n   *    filter, map, sort\r\n   *\r\n   * @param {Matrix | Array} x    The matrix to iterate on.\r\n   * @param {Function} callback   The callback function is invoked with three\r\n   *                              parameters: the value of the element, the index\r\n   *                              of the element, and the Matrix/array being traversed.\r\n   */\n  return typed(name, {\n    'Array, function': _forEach,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      x.forEach(callback);\n    }\n  });\n});\n\n/**\r\n * forEach for a multidimensional array\r\n * @param {Array} array\r\n * @param {Function} callback\r\n * @private\r\n */\nfunction _forEach(array, callback) {\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      forEachArray(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      return applyCallback(callback, value, index, array, 'forEach');\n    }\n  };\n  recurse(array, []);\n}","map":{"version":3,"names":["applyCallback","forEach","forEachArray","factory","name","dependencies","createForEach","_ref","typed","_forEach","MatrixFunction","x","callback","array","recurse","value","index","Array","isArray","child","i","concat"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/function/matrix/forEach.js"],"sourcesContent":["import { applyCallback } from '../../utils/applyCallback.js';\r\nimport { forEach as forEachArray } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'forEach';\r\nvar dependencies = ['typed'];\r\nexport var createForEach = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.forEach(x, callback)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.forEach([1, 2, 3], function(value) {\r\n   *      console.log(value)\r\n   *    })\r\n   *    // outputs 1, 2, 3\r\n   *\r\n   * See also:\r\n   *\r\n   *    filter, map, sort\r\n   *\r\n   * @param {Matrix | Array} x    The matrix to iterate on.\r\n   * @param {Function} callback   The callback function is invoked with three\r\n   *                              parameters: the value of the element, the index\r\n   *                              of the element, and the Matrix/array being traversed.\r\n   */\r\n  return typed(name, {\r\n    'Array, function': _forEach,\r\n    'Matrix, function': function MatrixFunction(x, callback) {\r\n      x.forEach(callback);\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * forEach for a multidimensional array\r\n * @param {Array} array\r\n * @param {Function} callback\r\n * @private\r\n */\r\nfunction _forEach(array, callback) {\r\n  var recurse = function recurse(value, index) {\r\n    if (Array.isArray(value)) {\r\n      forEachArray(value, function (child, i) {\r\n        // we create a copy of the index array and append the new index value\r\n        recurse(child, index.concat(i));\r\n      });\r\n    } else {\r\n      // invoke the callback function with the right number of arguments\r\n      return applyCallback(callback, value, index, array, 'forEach');\r\n    }\r\n  };\r\n  recurse(array, []);\r\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,8BAA8B;AAC5D,SAASC,OAAO,IAAIC,YAAY,QAAQ,sBAAsB;AAC9D,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC5E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,iBAAiB,EAAEK,QAAQ;IAC3B,kBAAkB,EAAE,SAASC,cAAcA,CAACC,CAAC,EAAEC,QAAQ,EAAE;MACvDD,CAAC,CAACV,OAAO,CAACW,QAAQ,CAAC;IACrB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,SAASH,QAAQA,CAACI,KAAK,EAAED,QAAQ,EAAE;EACjC,IAAIE,OAAO,GAAG,SAASA,OAAOA,CAACC,KAAK,EAAEC,KAAK,EAAE;IAC3C,IAAIC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;MACxBb,YAAY,CAACa,KAAK,EAAE,UAAUI,KAAK,EAAEC,CAAC,EAAE;QACtC;QACAN,OAAO,CAACK,KAAK,EAAEH,KAAK,CAACK,MAAM,CAACD,CAAC,CAAC,CAAC;MACjC,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA,OAAOpB,aAAa,CAACY,QAAQ,EAAEG,KAAK,EAAEC,KAAK,EAAEH,KAAK,EAAE,SAAS,CAAC;IAChE;EACF,CAAC;EACDC,OAAO,CAACD,KAAK,EAAE,EAAE,CAAC;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}