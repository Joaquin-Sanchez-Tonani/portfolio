{"ast":null,"code":"import { applyCallback } from '../../utils/applyCallback.js';\nimport { forEach } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is.js';\nimport { compileInlineExpression } from './utils/compileInlineExpression.js';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEachTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Attach a transform function to math.forEach\r\n   * Adds a property transform containing the transform function.\r\n   *\r\n   * This transform creates a one-based index instead of a zero-based index\r\n   */\n  function forEachTransform(args, math, scope) {\n    var x, callback;\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like forEach([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n    return _forEach(x, callback);\n  }\n  forEachTransform.rawArgs = true;\n\n  // one-based version of forEach\n  var _forEach = typed('forEach', {\n    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {\n      var recurse = function recurse(value, index) {\n        if (Array.isArray(value)) {\n          forEach(value, function (child, i) {\n            // we create a copy of the index array and append the new index value\n            recurse(child, index.concat(i + 1)); // one based index, hence i+1\n          });\n        } else {\n          // invoke the callback function with the right number of arguments\n          return applyCallback(callback, value, index, array, 'forEach');\n        }\n      };\n      recurse(array.valueOf(), []); // pass Array\n    }\n  });\n\n  return forEachTransform;\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["applyCallback","forEach","factory","isFunctionAssignmentNode","isSymbolNode","compileInlineExpression","name","dependencies","createForEachTransform","_ref","typed","forEachTransform","args","math","scope","x","callback","compile","evaluate","_forEach","rawArgs","ArrayMatrixFunction","array","recurse","value","index","Array","isArray","child","i","concat","valueOf","isTransformFunction"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/expression/transform/forEach.transform.js"],"sourcesContent":["import { applyCallback } from '../../utils/applyCallback.js';\r\nimport { forEach } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is.js';\r\nimport { compileInlineExpression } from './utils/compileInlineExpression.js';\r\nvar name = 'forEach';\r\nvar dependencies = ['typed'];\r\nexport var createForEachTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Attach a transform function to math.forEach\r\n   * Adds a property transform containing the transform function.\r\n   *\r\n   * This transform creates a one-based index instead of a zero-based index\r\n   */\r\n  function forEachTransform(args, math, scope) {\r\n    var x, callback;\r\n    if (args[0]) {\r\n      x = args[0].compile().evaluate(scope);\r\n    }\r\n    if (args[1]) {\r\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\r\n        // a function pointer, like forEach([3, -2, 5], myTestFunction)\r\n        callback = args[1].compile().evaluate(scope);\r\n      } else {\r\n        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )\r\n        callback = compileInlineExpression(args[1], math, scope);\r\n      }\r\n    }\r\n    return _forEach(x, callback);\r\n  }\r\n  forEachTransform.rawArgs = true;\r\n\r\n  // one-based version of forEach\r\n  var _forEach = typed('forEach', {\r\n    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {\r\n      var recurse = function recurse(value, index) {\r\n        if (Array.isArray(value)) {\r\n          forEach(value, function (child, i) {\r\n            // we create a copy of the index array and append the new index value\r\n            recurse(child, index.concat(i + 1)); // one based index, hence i+1\r\n          });\r\n        } else {\r\n          // invoke the callback function with the right number of arguments\r\n          return applyCallback(callback, value, index, array, 'forEach');\r\n        }\r\n      };\r\n      recurse(array.valueOf(), []); // pass Array\r\n    }\r\n  });\r\n\r\n  return forEachTransform;\r\n}, {\r\n  isTransformFunction: true\r\n});"],"mappings":"AAAA,SAASA,aAAa,QAAQ,8BAA8B;AAC5D,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,wBAAwB,EAAEC,YAAY,QAAQ,mBAAmB;AAC1E,SAASC,uBAAuB,QAAQ,oCAAoC;AAC5E,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,sBAAsB,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACrF,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;EACE,SAASE,gBAAgBA,CAACC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAE;IAC3C,IAAIC,CAAC,EAAEC,QAAQ;IACf,IAAIJ,IAAI,CAAC,CAAC,CAAC,EAAE;MACXG,CAAC,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACK,OAAO,CAAC,CAAC,CAACC,QAAQ,CAACJ,KAAK,CAAC;IACvC;IACA,IAAIF,IAAI,CAAC,CAAC,CAAC,EAAE;MACX,IAAIR,YAAY,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC,IAAIT,wBAAwB,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QAC9D;QACAI,QAAQ,GAAGJ,IAAI,CAAC,CAAC,CAAC,CAACK,OAAO,CAAC,CAAC,CAACC,QAAQ,CAACJ,KAAK,CAAC;MAC9C,CAAC,MAAM;QACL;QACAE,QAAQ,GAAGX,uBAAuB,CAACO,IAAI,CAAC,CAAC,CAAC,EAAEC,IAAI,EAAEC,KAAK,CAAC;MAC1D;IACF;IACA,OAAOK,QAAQ,CAACJ,CAAC,EAAEC,QAAQ,CAAC;EAC9B;EACAL,gBAAgB,CAACS,OAAO,GAAG,IAAI;;EAE/B;EACA,IAAID,QAAQ,GAAGT,KAAK,CAAC,SAAS,EAAE;IAC9B,0BAA0B,EAAE,SAASW,mBAAmBA,CAACC,KAAK,EAAEN,QAAQ,EAAE;MACxE,IAAIO,OAAO,GAAG,SAASA,OAAOA,CAACC,KAAK,EAAEC,KAAK,EAAE;QAC3C,IAAIC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;UACxBvB,OAAO,CAACuB,KAAK,EAAE,UAAUI,KAAK,EAAEC,CAAC,EAAE;YACjC;YACAN,OAAO,CAACK,KAAK,EAAEH,KAAK,CAACK,MAAM,CAACD,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;UACvC,CAAC,CAAC;QACJ,CAAC,MAAM;UACL;UACA,OAAO7B,aAAa,CAACgB,QAAQ,EAAEQ,KAAK,EAAEC,KAAK,EAAEH,KAAK,EAAE,SAAS,CAAC;QAChE;MACF,CAAC;MACDC,OAAO,CAACD,KAAK,CAACS,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAChC;EACF,CAAC,CAAC;;EAEF,OAAOpB,gBAAgB;AACzB,CAAC,EAAE;EACDqB,mBAAmB,EAAE;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}