{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { unaryPlusNumber } from '../../plain/number/index.js';\nvar name = 'unaryPlus';\nvar dependencies = ['typed', 'config', 'BigNumber'];\nexport var createUnaryPlus = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    BigNumber\n  } = _ref;\n  /**\r\n   * Unary plus operation.\r\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.unaryPlus(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.unaryPlus(3.5)      // returns 3.5\r\n   *    math.unaryPlus(1)     // returns 1\r\n   *\r\n   * See also:\r\n   *\r\n   *    unaryMinus, add, subtract\r\n   *\r\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\r\n   *            Input value\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\r\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\r\n   */\n  return typed(name, {\n    number: unaryPlusNumber,\n    Complex: function Complex(x) {\n      return x; // complex numbers are immutable\n    },\n\n    BigNumber: function BigNumber(x) {\n      return x; // bignumbers are immutable\n    },\n\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    // deep map collection, skip zeros since unaryPlus(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\n    'boolean | string': function booleanString(x) {\n      // convert to a number or bignumber\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","unaryPlusNumber","name","dependencies","createUnaryPlus","_ref","typed","config","BigNumber","number","Complex","x","Fraction","Unit","clone","referToSelf","self","booleanString"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/function/arithmetic/unaryPlus.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { unaryPlusNumber } from '../../plain/number/index.js';\r\nvar name = 'unaryPlus';\r\nvar dependencies = ['typed', 'config', 'BigNumber'];\r\nexport var createUnaryPlus = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    BigNumber\r\n  } = _ref;\r\n  /**\r\n   * Unary plus operation.\r\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.unaryPlus(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.unaryPlus(3.5)      // returns 3.5\r\n   *    math.unaryPlus(1)     // returns 1\r\n   *\r\n   * See also:\r\n   *\r\n   *    unaryMinus, add, subtract\r\n   *\r\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\r\n   *            Input value\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\r\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\r\n   */\r\n  return typed(name, {\r\n    number: unaryPlusNumber,\r\n    Complex: function Complex(x) {\r\n      return x; // complex numbers are immutable\r\n    },\r\n\r\n    BigNumber: function BigNumber(x) {\r\n      return x; // bignumbers are immutable\r\n    },\r\n\r\n    Fraction: function Fraction(x) {\r\n      return x; // fractions are immutable\r\n    },\r\n\r\n    Unit: function Unit(x) {\r\n      return x.clone();\r\n    },\r\n    // deep map collection, skip zeros since unaryPlus(0) = 0\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\r\n    'boolean | string': function booleanString(x) {\r\n      // convert to a number or bignumber\r\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,IAAIC,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,CAAC;AACnD,OAAO,IAAIC,eAAe,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC9E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBO,MAAM,EAAER,eAAe;IACvBS,OAAO,EAAE,SAASA,OAAOA,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAAC,CAAC;IACZ,CAAC;;IAEDH,SAAS,EAAE,SAASA,SAASA,CAACG,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAAC,CAAC;IACZ,CAAC;;IAEDC,QAAQ,EAAE,SAASA,QAAQA,CAACD,CAAC,EAAE;MAC7B,OAAOA,CAAC,CAAC,CAAC;IACZ,CAAC;;IAEDE,IAAI,EAAE,SAASA,IAAIA,CAACF,CAAC,EAAE;MACrB,OAAOA,CAAC,CAACG,KAAK,CAAC,CAAC;IAClB,CAAC;IACD;IACA,gBAAgB,EAAER,KAAK,CAACS,WAAW,CAACC,IAAI,IAAIL,CAAC,IAAIX,OAAO,CAACW,CAAC,EAAEK,IAAI,EAAE,IAAI,CAAC,CAAC;IACxE,kBAAkB,EAAE,SAASC,aAAaA,CAACN,CAAC,EAAE;MAC5C;MACA,OAAOJ,MAAM,CAACE,MAAM,KAAK,WAAW,GAAG,IAAID,SAAS,CAAC,CAACG,CAAC,CAAC,GAAG,CAACA,CAAC;IAC/D;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}