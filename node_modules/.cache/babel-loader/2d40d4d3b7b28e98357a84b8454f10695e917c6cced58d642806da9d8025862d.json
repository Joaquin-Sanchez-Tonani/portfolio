{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isZeroNumber } from '../../plain/number/index.js';\nvar name = 'isZero';\nvar dependencies = ['typed'];\nexport var createIsZero = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Test whether a value is zero.\r\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\r\n   * `Complex`, and `Unit`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isZero(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isZero(0)                      // returns true\r\n   *    math.isZero(2)                      // returns false\r\n   *    math.isZero(0.5)                    // returns false\r\n   *    math.isZero(math.bignumber(0))      // returns true\r\n   *    math.isZero(math.fraction(0))       // returns true\r\n   *    math.isZero(math.fraction(1,3))     // returns false\r\n   *    math.isZero(math.complex('2 - 4i')) // returns false\r\n   *    math.isZero(math.complex('0i'))     // returns true\r\n   *    math.isZero('0')                    // returns true\r\n   *    math.isZero('2')                    // returns false\r\n   *    math.isZero([2, 0, -3])             // returns [false, true, false]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isPositive, isNegative, isInteger\r\n   *\r\n   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\r\n   * @return {boolean}  Returns true when `x` is zero.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\n  return typed(name, {\n    number: isZeroNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isZero();\n    },\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && x.n === 0;\n    },\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["deepMap","factory","isZeroNumber","name","dependencies","createIsZero","_ref","typed","number","BigNumber","x","isZero","Complex","re","im","Fraction","d","n","Unit","referToSelf","self","find","valueType","value"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/function/utils/isZero.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { isZeroNumber } from '../../plain/number/index.js';\r\nvar name = 'isZero';\r\nvar dependencies = ['typed'];\r\nexport var createIsZero = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Test whether a value is zero.\r\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\r\n   * `Complex`, and `Unit`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isZero(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isZero(0)                      // returns true\r\n   *    math.isZero(2)                      // returns false\r\n   *    math.isZero(0.5)                    // returns false\r\n   *    math.isZero(math.bignumber(0))      // returns true\r\n   *    math.isZero(math.fraction(0))       // returns true\r\n   *    math.isZero(math.fraction(1,3))     // returns false\r\n   *    math.isZero(math.complex('2 - 4i')) // returns false\r\n   *    math.isZero(math.complex('0i'))     // returns true\r\n   *    math.isZero('0')                    // returns true\r\n   *    math.isZero('2')                    // returns false\r\n   *    math.isZero([2, 0, -3])             // returns [false, true, false]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isPositive, isNegative, isInteger\r\n   *\r\n   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\r\n   * @return {boolean}  Returns true when `x` is zero.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\r\n  return typed(name, {\r\n    number: isZeroNumber,\r\n    BigNumber: function BigNumber(x) {\r\n      return x.isZero();\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.re === 0 && x.im === 0;\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return x.d === 1 && x.n === 0;\r\n    },\r\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,YAAY,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC3E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAEN,YAAY;IACpBO,SAAS,EAAE,SAASA,SAASA,CAACC,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACC,MAAM,CAAC,CAAC;IACnB,CAAC;IACDC,OAAO,EAAE,SAASA,OAAOA,CAACF,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACG,EAAE,KAAK,CAAC,IAAIH,CAAC,CAACI,EAAE,KAAK,CAAC;IACjC,CAAC;IACDC,QAAQ,EAAE,SAASA,QAAQA,CAACL,CAAC,EAAE;MAC7B,OAAOA,CAAC,CAACM,CAAC,KAAK,CAAC,IAAIN,CAAC,CAACO,CAAC,KAAK,CAAC;IAC/B,CAAC;IACDC,IAAI,EAAEX,KAAK,CAACY,WAAW,CAACC,IAAI,IAAIV,CAAC,IAAIH,KAAK,CAACc,IAAI,CAACD,IAAI,EAAEV,CAAC,CAACY,SAAS,CAAC,CAAC,CAAC,CAACZ,CAAC,CAACa,KAAK,CAAC,CAAC;IAC9E,gBAAgB,EAAEhB,KAAK,CAACY,WAAW,CAACC,IAAI,IAAIV,CAAC,IAAIV,OAAO,CAACU,CAAC,EAAEU,IAAI,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}