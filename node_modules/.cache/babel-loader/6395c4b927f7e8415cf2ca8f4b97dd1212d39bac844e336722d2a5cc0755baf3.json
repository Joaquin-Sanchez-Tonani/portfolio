{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { logNumber } from '../../plain/number/index.js';\nvar name = 'log';\nvar dependencies = ['config', 'typed', 'divideScalar', 'Complex'];\nexport var createLog = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    divideScalar,\n    Complex\n  } = _ref;\n  /**\r\n   * Calculate the logarithm of a value.\r\n   *\r\n   * To avoid confusion with the matrix logarithm, this function does not\r\n   * apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.log(x)\r\n   *    math.log(x, base)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.log(3.5)                  // returns 1.252762968495368\r\n   *    math.exp(math.log(2.4))        // returns 2.4\r\n   *\r\n   *    math.pow(10, 4)                // returns 10000\r\n   *    math.log(10000, 10)            // returns 4\r\n   *    math.log(10000) / math.log(10) // returns 4\r\n   *\r\n   *    math.log(1024, 2)              // returns 10\r\n   *    math.pow(2, 10)                // returns 1024\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, log2, log10, log1p\r\n   *\r\n   * @param {number | BigNumber | Complex} x\r\n   *            Value for which to calculate the logarithm.\r\n   * @param {number | BigNumber | Complex} [base=e]\r\n   *            Optional base for the logarithm. If not provided, the natural\r\n   *            logarithm of `x` is calculated.\r\n   * @return {number | BigNumber | Complex}\r\n   *            Returns the logarithm of `x`\r\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return logNumber(x);\n      } else {\n        // negative value -> complex value computation\n        return new Complex(x, 0).log();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.log();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new Complex(x.toNumber(), 0).log();\n      }\n    },\n    'any, any': typed.referToSelf(self => (x, base) => {\n      // calculate logarithm for a specified base, log(x, base)\n      return divideScalar(self(x), self(base));\n    })\n  });\n});","map":{"version":3,"names":["factory","logNumber","name","dependencies","createLog","_ref","typed","config","divideScalar","Complex","number","x","predictable","log","BigNumber","isNegative","ln","toNumber","referToSelf","self","base"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/function/arithmetic/log.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { logNumber } from '../../plain/number/index.js';\r\nvar name = 'log';\r\nvar dependencies = ['config', 'typed', 'divideScalar', 'Complex'];\r\nexport var createLog = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    divideScalar,\r\n    Complex\r\n  } = _ref;\r\n  /**\r\n   * Calculate the logarithm of a value.\r\n   *\r\n   * To avoid confusion with the matrix logarithm, this function does not\r\n   * apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.log(x)\r\n   *    math.log(x, base)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.log(3.5)                  // returns 1.252762968495368\r\n   *    math.exp(math.log(2.4))        // returns 2.4\r\n   *\r\n   *    math.pow(10, 4)                // returns 10000\r\n   *    math.log(10000, 10)            // returns 4\r\n   *    math.log(10000) / math.log(10) // returns 4\r\n   *\r\n   *    math.log(1024, 2)              // returns 10\r\n   *    math.pow(2, 10)                // returns 1024\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, log2, log10, log1p\r\n   *\r\n   * @param {number | BigNumber | Complex} x\r\n   *            Value for which to calculate the logarithm.\r\n   * @param {number | BigNumber | Complex} [base=e]\r\n   *            Optional base for the logarithm. If not provided, the natural\r\n   *            logarithm of `x` is calculated.\r\n   * @return {number | BigNumber | Complex}\r\n   *            Returns the logarithm of `x`\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      if (x >= 0 || config.predictable) {\r\n        return logNumber(x);\r\n      } else {\r\n        // negative value -> complex value computation\r\n        return new Complex(x, 0).log();\r\n      }\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.log();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      if (!x.isNegative() || config.predictable) {\r\n        return x.ln();\r\n      } else {\r\n        // downgrade to number, return Complex valued result\r\n        return new Complex(x.toNumber(), 0).log();\r\n      }\r\n    },\r\n    'any, any': typed.referToSelf(self => (x, base) => {\r\n      // calculate logarithm for a specified base, log(x, base)\r\n      return divideScalar(self(x), self(base));\r\n    })\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,QAAQ,6BAA6B;AACvD,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,cAAc,EAAE,SAAS,CAAC;AACjE,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,YAAY;IACZC;EACF,CAAC,GAAGJ,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBQ,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,IAAI,CAAC,IAAIJ,MAAM,CAACK,WAAW,EAAE;QAChC,OAAOX,SAAS,CAACU,CAAC,CAAC;MACrB,CAAC,MAAM;QACL;QACA,OAAO,IAAIF,OAAO,CAACE,CAAC,EAAE,CAAC,CAAC,CAACE,GAAG,CAAC,CAAC;MAChC;IACF,CAAC;IACDJ,OAAO,EAAE,SAASA,OAAOA,CAACE,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACE,GAAG,CAAC,CAAC;IAChB,CAAC;IACDC,SAAS,EAAE,SAASA,SAASA,CAACH,CAAC,EAAE;MAC/B,IAAI,CAACA,CAAC,CAACI,UAAU,CAAC,CAAC,IAAIR,MAAM,CAACK,WAAW,EAAE;QACzC,OAAOD,CAAC,CAACK,EAAE,CAAC,CAAC;MACf,CAAC,MAAM;QACL;QACA,OAAO,IAAIP,OAAO,CAACE,CAAC,CAACM,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAACJ,GAAG,CAAC,CAAC;MAC3C;IACF,CAAC;IACD,UAAU,EAAEP,KAAK,CAACY,WAAW,CAACC,IAAI,IAAI,CAACR,CAAC,EAAES,IAAI,KAAK;MACjD;MACA,OAAOZ,YAAY,CAACW,IAAI,CAACR,CAAC,CAAC,EAAEQ,IAAI,CAACC,IAAI,CAAC,CAAC;IAC1C,CAAC;EACH,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}