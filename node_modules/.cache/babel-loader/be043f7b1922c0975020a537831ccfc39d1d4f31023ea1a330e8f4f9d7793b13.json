{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isPositiveNumber } from '../../plain/number/index.js';\nvar name = 'isPositive';\nvar dependencies = ['typed'];\nexport var createIsPositive = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Test whether a value is positive: larger than zero.\r\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isPositive(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isPositive(3)                     // returns true\r\n   *    math.isPositive(-2)                    // returns false\r\n   *    math.isPositive(0)                     // returns false\r\n   *    math.isPositive(-0)                    // returns false\r\n   *    math.isPositive(0.5)                   // returns true\r\n   *    math.isPositive(math.bignumber(2))     // returns true\r\n   *    math.isPositive(math.fraction(-2, 5))  // returns false\r\n   *    math.isPositive(math.fraction(1, 3))   // returns true\r\n   *    math.isPositive('2')                   // returns true\r\n   *    math.isPositive([2, 0, -3])            // returns [true, false, false]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isZero, isNegative, isInteger\r\n   *\r\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\r\n   * @return {boolean}  Returns true when `x` is larger than zero.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\n  return typed(name, {\n    number: isPositiveNumber,\n    BigNumber: function BigNumber(x) {\n      return !x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return x.s > 0 && x.n > 0;\n    },\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["deepMap","factory","isPositiveNumber","name","dependencies","createIsPositive","_ref","typed","number","BigNumber","x","isNeg","isZero","isNaN","Fraction","s","n","Unit","referToSelf","self","find","valueType","value"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/function/utils/isPositive.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { isPositiveNumber } from '../../plain/number/index.js';\r\nvar name = 'isPositive';\r\nvar dependencies = ['typed'];\r\nexport var createIsPositive = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Test whether a value is positive: larger than zero.\r\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isPositive(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isPositive(3)                     // returns true\r\n   *    math.isPositive(-2)                    // returns false\r\n   *    math.isPositive(0)                     // returns false\r\n   *    math.isPositive(-0)                    // returns false\r\n   *    math.isPositive(0.5)                   // returns true\r\n   *    math.isPositive(math.bignumber(2))     // returns true\r\n   *    math.isPositive(math.fraction(-2, 5))  // returns false\r\n   *    math.isPositive(math.fraction(1, 3))   // returns true\r\n   *    math.isPositive('2')                   // returns true\r\n   *    math.isPositive([2, 0, -3])            // returns [true, false, false]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isZero, isNegative, isInteger\r\n   *\r\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\r\n   * @return {boolean}  Returns true when `x` is larger than zero.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\r\n  return typed(name, {\r\n    number: isPositiveNumber,\r\n    BigNumber: function BigNumber(x) {\r\n      return !x.isNeg() && !x.isZero() && !x.isNaN();\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return x.s > 0 && x.n > 0;\r\n    },\r\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,IAAIC,IAAI,GAAG,YAAY;AACvB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,gBAAgB,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC/E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAEN,gBAAgB;IACxBO,SAAS,EAAE,SAASA,SAASA,CAACC,CAAC,EAAE;MAC/B,OAAO,CAACA,CAAC,CAACC,KAAK,CAAC,CAAC,IAAI,CAACD,CAAC,CAACE,MAAM,CAAC,CAAC,IAAI,CAACF,CAAC,CAACG,KAAK,CAAC,CAAC;IAChD,CAAC;IACDC,QAAQ,EAAE,SAASA,QAAQA,CAACJ,CAAC,EAAE;MAC7B,OAAOA,CAAC,CAACK,CAAC,GAAG,CAAC,IAAIL,CAAC,CAACM,CAAC,GAAG,CAAC;IAC3B,CAAC;IACDC,IAAI,EAAEV,KAAK,CAACW,WAAW,CAACC,IAAI,IAAIT,CAAC,IAAIH,KAAK,CAACa,IAAI,CAACD,IAAI,EAAET,CAAC,CAACW,SAAS,CAAC,CAAC,CAAC,CAACX,CAAC,CAACY,KAAK,CAAC,CAAC;IAC9E,gBAAgB,EAAEf,KAAK,CAACW,WAAW,CAACC,IAAI,IAAIT,CAAC,IAAIV,OAAO,CAACU,CAAC,EAAES,IAAI,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}