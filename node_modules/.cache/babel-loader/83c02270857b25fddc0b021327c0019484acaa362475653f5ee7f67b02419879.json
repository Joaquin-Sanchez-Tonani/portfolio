{"ast":null,"code":"import { applyCallback } from '../../utils/applyCallback.js';\nimport { filter, filterRegExp } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is.js';\nimport { compileInlineExpression } from './utils/compileInlineExpression.js';\nvar name = 'filter';\nvar dependencies = ['typed'];\nexport var createFilterTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Attach a transform function to math.filter\r\n   * Adds a property transform containing the transform function.\r\n   *\r\n   * This transform adds support for equations as test function for math.filter,\r\n   * so you can do something like 'filter([3, -2, 5], x > 0)'.\r\n   */\n  function filterTransform(args, math, scope) {\n    var x, callback;\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like filter([3, -2, 5], x > 0)\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n    return filter(x, callback);\n  }\n  filterTransform.rawArgs = true;\n\n  // one based version of function filter\n  var filter = typed('filter', {\n    'Array, function': _filter,\n    'Matrix, function': function MatrixFunction(x, test) {\n      return x.create(_filter(x.toArray(), test));\n    },\n    'Array, RegExp': filterRegExp,\n    'Matrix, RegExp': function MatrixRegExp(x, test) {\n      return x.create(filterRegExp(x.toArray(), test));\n    }\n  });\n  return filterTransform;\n}, {\n  isTransformFunction: true\n});\n\n/**\r\n * Filter values in a callback given a callback function\r\n *\r\n * !!! Passes a one-based index !!!\r\n *\r\n * @param {Array} x\r\n * @param {Function} callback\r\n * @return {Array} Returns the filtered array\r\n * @private\r\n */\nfunction _filter(x, callback) {\n  return filter(x, function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    return applyCallback(callback, value, [index + 1], array, 'filter');\n  });\n}","map":{"version":3,"names":["applyCallback","filter","filterRegExp","factory","isFunctionAssignmentNode","isSymbolNode","compileInlineExpression","name","dependencies","createFilterTransform","_ref","typed","filterTransform","args","math","scope","x","callback","compile","evaluate","rawArgs","_filter","MatrixFunction","test","create","toArray","MatrixRegExp","isTransformFunction","value","index","array"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/expression/transform/filter.transform.js"],"sourcesContent":["import { applyCallback } from '../../utils/applyCallback.js';\r\nimport { filter, filterRegExp } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is.js';\r\nimport { compileInlineExpression } from './utils/compileInlineExpression.js';\r\nvar name = 'filter';\r\nvar dependencies = ['typed'];\r\nexport var createFilterTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Attach a transform function to math.filter\r\n   * Adds a property transform containing the transform function.\r\n   *\r\n   * This transform adds support for equations as test function for math.filter,\r\n   * so you can do something like 'filter([3, -2, 5], x > 0)'.\r\n   */\r\n  function filterTransform(args, math, scope) {\r\n    var x, callback;\r\n    if (args[0]) {\r\n      x = args[0].compile().evaluate(scope);\r\n    }\r\n    if (args[1]) {\r\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\r\n        // a function pointer, like filter([3, -2, 5], myTestFunction)\r\n        callback = args[1].compile().evaluate(scope);\r\n      } else {\r\n        // an expression like filter([3, -2, 5], x > 0)\r\n        callback = compileInlineExpression(args[1], math, scope);\r\n      }\r\n    }\r\n    return filter(x, callback);\r\n  }\r\n  filterTransform.rawArgs = true;\r\n\r\n  // one based version of function filter\r\n  var filter = typed('filter', {\r\n    'Array, function': _filter,\r\n    'Matrix, function': function MatrixFunction(x, test) {\r\n      return x.create(_filter(x.toArray(), test));\r\n    },\r\n    'Array, RegExp': filterRegExp,\r\n    'Matrix, RegExp': function MatrixRegExp(x, test) {\r\n      return x.create(filterRegExp(x.toArray(), test));\r\n    }\r\n  });\r\n  return filterTransform;\r\n}, {\r\n  isTransformFunction: true\r\n});\r\n\r\n/**\r\n * Filter values in a callback given a callback function\r\n *\r\n * !!! Passes a one-based index !!!\r\n *\r\n * @param {Array} x\r\n * @param {Function} callback\r\n * @return {Array} Returns the filtered array\r\n * @private\r\n */\r\nfunction _filter(x, callback) {\r\n  return filter(x, function (value, index, array) {\r\n    // invoke the callback function with the right number of arguments\r\n    return applyCallback(callback, value, [index + 1], array, 'filter');\r\n  });\r\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,8BAA8B;AAC5D,SAASC,MAAM,EAAEC,YAAY,QAAQ,sBAAsB;AAC3D,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,wBAAwB,EAAEC,YAAY,QAAQ,mBAAmB;AAC1E,SAASC,uBAAuB,QAAQ,oCAAoC;AAC5E,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,qBAAqB,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACpF,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASE,eAAeA,CAACC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAE;IAC1C,IAAIC,CAAC,EAAEC,QAAQ;IACf,IAAIJ,IAAI,CAAC,CAAC,CAAC,EAAE;MACXG,CAAC,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACK,OAAO,CAAC,CAAC,CAACC,QAAQ,CAACJ,KAAK,CAAC;IACvC;IACA,IAAIF,IAAI,CAAC,CAAC,CAAC,EAAE;MACX,IAAIR,YAAY,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC,IAAIT,wBAAwB,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QAC9D;QACAI,QAAQ,GAAGJ,IAAI,CAAC,CAAC,CAAC,CAACK,OAAO,CAAC,CAAC,CAACC,QAAQ,CAACJ,KAAK,CAAC;MAC9C,CAAC,MAAM;QACL;QACAE,QAAQ,GAAGX,uBAAuB,CAACO,IAAI,CAAC,CAAC,CAAC,EAAEC,IAAI,EAAEC,KAAK,CAAC;MAC1D;IACF;IACA,OAAOd,MAAM,CAACe,CAAC,EAAEC,QAAQ,CAAC;EAC5B;EACAL,eAAe,CAACQ,OAAO,GAAG,IAAI;;EAE9B;EACA,IAAInB,MAAM,GAAGU,KAAK,CAAC,QAAQ,EAAE;IAC3B,iBAAiB,EAAEU,OAAO;IAC1B,kBAAkB,EAAE,SAASC,cAAcA,CAACN,CAAC,EAAEO,IAAI,EAAE;MACnD,OAAOP,CAAC,CAACQ,MAAM,CAACH,OAAO,CAACL,CAAC,CAACS,OAAO,CAAC,CAAC,EAAEF,IAAI,CAAC,CAAC;IAC7C,CAAC;IACD,eAAe,EAAErB,YAAY;IAC7B,gBAAgB,EAAE,SAASwB,YAAYA,CAACV,CAAC,EAAEO,IAAI,EAAE;MAC/C,OAAOP,CAAC,CAACQ,MAAM,CAACtB,YAAY,CAACc,CAAC,CAACS,OAAO,CAAC,CAAC,EAAEF,IAAI,CAAC,CAAC;IAClD;EACF,CAAC,CAAC;EACF,OAAOX,eAAe;AACxB,CAAC,EAAE;EACDe,mBAAmB,EAAE;AACvB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASN,OAAOA,CAACL,CAAC,EAAEC,QAAQ,EAAE;EAC5B,OAAOhB,MAAM,CAACe,CAAC,EAAE,UAAUY,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC9C;IACA,OAAO9B,aAAa,CAACiB,QAAQ,EAAEW,KAAK,EAAE,CAACC,KAAK,GAAG,CAAC,CAAC,EAAEC,KAAK,EAAE,QAAQ,CAAC;EACrE,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}