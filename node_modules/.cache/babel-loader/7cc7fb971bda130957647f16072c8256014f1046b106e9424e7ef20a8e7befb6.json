{"ast":null,"code":"import { isInteger } from './number.js';\nimport { isNumber } from './is.js';\nimport { format } from './string.js';\nimport { DimensionError } from '../error/DimensionError.js';\nimport { IndexError } from '../error/IndexError.js';\n\n/**\r\n * Calculate the size of a multi dimensional array.\r\n * This function checks the size of the first entry, it does not validate\r\n * whether all dimensions match. (use function `validate` for that)\r\n * @param {Array} x\r\n * @Return {Number[]} size\r\n */\nexport function arraySize(x) {\n  var s = [];\n  while (Array.isArray(x)) {\n    s.push(x.length);\n    x = x[0];\n  }\n  return s;\n}\n\n/**\r\n * Recursively validate whether each element in a multi dimensional array\r\n * has a size corresponding to the provided size array.\r\n * @param {Array} array    Array to be validated\r\n * @param {number[]} size  Array with the size of each dimension\r\n * @param {number} dim   Current dimension\r\n * @throws DimensionError\r\n * @private\r\n */\nfunction _validate(array, size, dim) {\n  var i;\n  var len = array.length;\n  if (len !== size[dim]) {\n    throw new DimensionError(len, size[dim]);\n  }\n  if (dim < size.length - 1) {\n    // recursively validate each child array\n    var dimNext = dim + 1;\n    for (i = 0; i < len; i++) {\n      var child = array[i];\n      if (!Array.isArray(child)) {\n        throw new DimensionError(size.length - 1, size.length, '<');\n      }\n      _validate(array[i], size, dimNext);\n    }\n  } else {\n    // last dimension. none of the childs may be an array\n    for (i = 0; i < len; i++) {\n      if (Array.isArray(array[i])) {\n        throw new DimensionError(size.length + 1, size.length, '>');\n      }\n    }\n  }\n}\n\n/**\r\n * Validate whether each element in a multi dimensional array has\r\n * a size corresponding to the provided size array.\r\n * @param {Array} array    Array to be validated\r\n * @param {number[]} size  Array with the size of each dimension\r\n * @throws DimensionError\r\n */\nexport function validate(array, size) {\n  var isScalar = size.length === 0;\n  if (isScalar) {\n    // scalar\n    if (Array.isArray(array)) {\n      throw new DimensionError(array.length, 0);\n    }\n  } else {\n    // array\n    _validate(array, size, 0);\n  }\n}\n\n/**\r\n * Test whether index is an integer number with index >= 0 and index < length\r\n * when length is provided\r\n * @param {number} index    Zero-based index\r\n * @param {number} [length] Length of the array\r\n */\nexport function validateIndex(index, length) {\n  if (!isNumber(index) || !isInteger(index)) {\n    throw new TypeError('Index must be an integer (value: ' + index + ')');\n  }\n  if (index < 0 || typeof length === 'number' && index >= length) {\n    throw new IndexError(index, length);\n  }\n}\n\n/**\r\n * Resize a multi dimensional array. The resized array is returned.\r\n * @param {Array} array         Array to be resized\r\n * @param {Array.<number>} size Array with the size of each dimension\r\n * @param {*} [defaultValue=0]  Value to be filled in in new entries,\r\n *                              zero by default. Specify for example `null`,\r\n *                              to clearly see entries that are not explicitly\r\n *                              set.\r\n * @return {Array} array         The resized array\r\n */\nexport function resize(array, size, defaultValue) {\n  // TODO: add support for scalars, having size=[] ?\n\n  // check the type of the arguments\n  if (!Array.isArray(array) || !Array.isArray(size)) {\n    throw new TypeError('Array expected');\n  }\n  if (size.length === 0) {\n    throw new Error('Resizing to scalar is not supported');\n  }\n\n  // check whether size contains positive integers\n  size.forEach(function (value) {\n    if (!isNumber(value) || !isInteger(value) || value < 0) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');\n    }\n  });\n\n  // recursively resize the array\n  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;\n  _resize(array, size, 0, _defaultValue);\n  return array;\n}\n\n/**\r\n * Recursively resize a multi dimensional array\r\n * @param {Array} array         Array to be resized\r\n * @param {number[]} size       Array with the size of each dimension\r\n * @param {number} dim          Current dimension\r\n * @param {*} [defaultValue]    Value to be filled in in new entries,\r\n *                              undefined by default.\r\n * @private\r\n */\nfunction _resize(array, size, dim, defaultValue) {\n  var i;\n  var elem;\n  var oldLen = array.length;\n  var newLen = size[dim];\n  var minLen = Math.min(oldLen, newLen);\n\n  // apply new length\n  array.length = newLen;\n  if (dim < size.length - 1) {\n    // non-last dimension\n    var dimNext = dim + 1;\n\n    // resize existing child arrays\n    for (i = 0; i < minLen; i++) {\n      // resize child array\n      elem = array[i];\n      if (!Array.isArray(elem)) {\n        elem = [elem]; // add a dimension\n        array[i] = elem;\n      }\n      _resize(elem, size, dimNext, defaultValue);\n    }\n\n    // create new child arrays\n    for (i = minLen; i < newLen; i++) {\n      // get child array\n      elem = [];\n      array[i] = elem;\n\n      // resize new child array\n      _resize(elem, size, dimNext, defaultValue);\n    }\n  } else {\n    // last dimension\n\n    // remove dimensions of existing values\n    for (i = 0; i < minLen; i++) {\n      while (Array.isArray(array[i])) {\n        array[i] = array[i][0];\n      }\n    }\n\n    // fill new elements with the default value\n    for (i = minLen; i < newLen; i++) {\n      array[i] = defaultValue;\n    }\n  }\n}\n\n/**\r\n * Re-shape a multi dimensional array to fit the specified dimensions\r\n * @param {Array} array           Array to be reshaped\r\n * @param {Array.<number>} sizes  List of sizes for each dimension\r\n * @returns {Array}               Array whose data has been formatted to fit the\r\n *                                specified dimensions\r\n *\r\n * @throws {DimensionError}       If the product of the new dimension sizes does\r\n *                                not equal that of the old ones\r\n */\nexport function reshape(array, sizes) {\n  var flatArray = flatten(array);\n  var currentLength = flatArray.length;\n  if (!Array.isArray(array) || !Array.isArray(sizes)) {\n    throw new TypeError('Array expected');\n  }\n  if (sizes.length === 0) {\n    throw new DimensionError(0, currentLength, '!=');\n  }\n  sizes = processSizesWildcard(sizes, currentLength);\n  var newLength = product(sizes);\n  if (currentLength !== newLength) {\n    throw new DimensionError(newLength, currentLength, '!=');\n  }\n  try {\n    return _reshape(flatArray, sizes);\n  } catch (e) {\n    if (e instanceof DimensionError) {\n      throw new DimensionError(newLength, currentLength, '!=');\n    }\n    throw e;\n  }\n}\n\n/**\r\n * Replaces the wildcard -1 in the sizes array.\r\n * @param {Array.<number>} sizes  List of sizes for each dimension. At most on wildcard.\r\n * @param {number} currentLength  Number of elements in the array.\r\n * @throws {Error}                If more than one wildcard or unable to replace it.\r\n * @returns {Array.<number>}      The sizes array with wildcard replaced.\r\n */\nexport function processSizesWildcard(sizes, currentLength) {\n  var newLength = product(sizes);\n  var processedSizes = sizes.slice();\n  var WILDCARD = -1;\n  var wildCardIndex = sizes.indexOf(WILDCARD);\n  var isMoreThanOneWildcard = sizes.indexOf(WILDCARD, wildCardIndex + 1) >= 0;\n  if (isMoreThanOneWildcard) {\n    throw new Error('More than one wildcard in sizes');\n  }\n  var hasWildcard = wildCardIndex >= 0;\n  var canReplaceWildcard = currentLength % newLength === 0;\n  if (hasWildcard) {\n    if (canReplaceWildcard) {\n      processedSizes[wildCardIndex] = -currentLength / newLength;\n    } else {\n      throw new Error('Could not replace wildcard, since ' + currentLength + ' is no multiple of ' + -newLength);\n    }\n  }\n  return processedSizes;\n}\n\n/**\r\n * Computes the product of all array elements.\r\n * @param {Array<number>} array Array of factors\r\n * @returns {number}            Product of all elements\r\n */\nfunction product(array) {\n  return array.reduce((prev, curr) => prev * curr, 1);\n}\n\n/**\r\n * Iteratively re-shape a multi dimensional array to fit the specified dimensions\r\n * @param {Array} array           Array to be reshaped\r\n * @param {Array.<number>} sizes  List of sizes for each dimension\r\n * @returns {Array}               Array whose data has been formatted to fit the\r\n *                                specified dimensions\r\n */\n\nfunction _reshape(array, sizes) {\n  // testing if there are enough elements for the requested shape\n  var tmpArray = array;\n  var tmpArray2;\n  // for each dimensions starting by the last one and ignoring the first one\n  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {\n    var size = sizes[sizeIndex];\n    tmpArray2 = [];\n\n    // aggregate the elements of the current tmpArray in elements of the requested size\n    var length = tmpArray.length / size;\n    for (var i = 0; i < length; i++) {\n      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));\n    }\n    // set it as the new tmpArray for the next loop turn or for return\n    tmpArray = tmpArray2;\n  }\n  return tmpArray;\n}\n\n/**\r\n * Squeeze a multi dimensional array\r\n * @param {Array} array\r\n * @param {Array} [size]\r\n * @returns {Array} returns the array itself\r\n */\nexport function squeeze(array, size) {\n  var s = size || arraySize(array);\n\n  // squeeze outer dimensions\n  while (Array.isArray(array) && array.length === 1) {\n    array = array[0];\n    s.shift();\n  }\n\n  // find the first dimension to be squeezed\n  var dims = s.length;\n  while (s[dims - 1] === 1) {\n    dims--;\n  }\n\n  // squeeze inner dimensions\n  if (dims < s.length) {\n    array = _squeeze(array, dims, 0);\n    s.length = dims;\n  }\n  return array;\n}\n\n/**\r\n * Recursively squeeze a multi dimensional array\r\n * @param {Array} array\r\n * @param {number} dims Required number of dimensions\r\n * @param {number} dim  Current dimension\r\n * @returns {Array | *} Returns the squeezed array\r\n * @private\r\n */\nfunction _squeeze(array, dims, dim) {\n  var i, ii;\n  if (dim < dims) {\n    var next = dim + 1;\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _squeeze(array[i], dims, next);\n    }\n  } else {\n    while (Array.isArray(array)) {\n      array = array[0];\n    }\n  }\n  return array;\n}\n\n/**\r\n * Unsqueeze a multi dimensional array: add dimensions when missing\r\n *\r\n * Paramter `size` will be mutated to match the new, unqueezed matrix size.\r\n *\r\n * @param {Array} array\r\n * @param {number} dims       Desired number of dimensions of the array\r\n * @param {number} [outer]    Number of outer dimensions to be added\r\n * @param {Array} [size] Current size of array.\r\n * @returns {Array} returns the array itself\r\n * @private\r\n */\nexport function unsqueeze(array, dims, outer, size) {\n  var s = size || arraySize(array);\n\n  // unsqueeze outer dimensions\n  if (outer) {\n    for (var i = 0; i < outer; i++) {\n      array = [array];\n      s.unshift(1);\n    }\n  }\n\n  // unsqueeze inner dimensions\n  array = _unsqueeze(array, dims, 0);\n  while (s.length < dims) {\n    s.push(1);\n  }\n  return array;\n}\n\n/**\r\n * Recursively unsqueeze a multi dimensional array\r\n * @param {Array} array\r\n * @param {number} dims Required number of dimensions\r\n * @param {number} dim  Current dimension\r\n * @returns {Array | *} Returns the squeezed array\r\n * @private\r\n */\nfunction _unsqueeze(array, dims, dim) {\n  var i, ii;\n  if (Array.isArray(array)) {\n    var next = dim + 1;\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _unsqueeze(array[i], dims, next);\n    }\n  } else {\n    for (var d = dim; d < dims; d++) {\n      array = [array];\n    }\n  }\n  return array;\n}\n/**\r\n * Flatten a multi dimensional array, put all elements in a one dimensional\r\n * array\r\n * @param {Array} array   A multi dimensional array\r\n * @return {Array}        The flattened array (1 dimensional)\r\n */\nexport function flatten(array) {\n  if (!Array.isArray(array)) {\n    // if not an array, return as is\n    return array;\n  }\n  var flat = [];\n  array.forEach(function callback(value) {\n    if (Array.isArray(value)) {\n      value.forEach(callback); // traverse through sub-arrays recursively\n    } else {\n      flat.push(value);\n    }\n  });\n  return flat;\n}\n\n/**\r\n * A safe map\r\n * @param {Array} array\r\n * @param {function} callback\r\n */\nexport function map(array, callback) {\n  return Array.prototype.map.call(array, callback);\n}\n\n/**\r\n * A safe forEach\r\n * @param {Array} array\r\n * @param {function} callback\r\n */\nexport function forEach(array, callback) {\n  Array.prototype.forEach.call(array, callback);\n}\n\n/**\r\n * A safe filter\r\n * @param {Array} array\r\n * @param {function} callback\r\n */\nexport function filter(array, callback) {\n  if (arraySize(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n  return Array.prototype.filter.call(array, callback);\n}\n\n/**\r\n * Filter values in a callback given a regular expression\r\n * @param {Array} array\r\n * @param {RegExp} regexp\r\n * @return {Array} Returns the filtered array\r\n * @private\r\n */\nexport function filterRegExp(array, regexp) {\n  if (arraySize(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n  return Array.prototype.filter.call(array, entry => regexp.test(entry));\n}\n\n/**\r\n * A safe join\r\n * @param {Array} array\r\n * @param {string} separator\r\n */\nexport function join(array, separator) {\n  return Array.prototype.join.call(array, separator);\n}\n\n/**\r\n * Assign a numeric identifier to every element of a sorted array\r\n * @param {Array} a  An array\r\n * @return {Array} An array of objects containing the original value and its identifier\r\n */\nexport function identify(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n  if (a.length === 0) {\n    return a;\n  }\n  var b = [];\n  var count = 0;\n  b[0] = {\n    value: a[0],\n    identifier: 0\n  };\n  for (var i = 1; i < a.length; i++) {\n    if (a[i] === a[i - 1]) {\n      count++;\n    } else {\n      count = 0;\n    }\n    b.push({\n      value: a[i],\n      identifier: count\n    });\n  }\n  return b;\n}\n\n/**\r\n * Remove the numeric identifier from the elements\r\n * @param {array} a  An array\r\n * @return {array} An array of values without identifiers\r\n */\nexport function generalize(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n  if (a.length === 0) {\n    return a;\n  }\n  var b = [];\n  for (var i = 0; i < a.length; i++) {\n    b.push(a[i].value);\n  }\n  return b;\n}\n\n/**\r\n * Check the datatype of a given object\r\n * This is a low level implementation that should only be used by\r\n * parent Matrix classes such as SparseMatrix or DenseMatrix\r\n * This method does not validate Array Matrix shape\r\n * @param {Array} array\r\n * @param {function} typeOf   Callback function to use to determine the type of a value\r\n * @return {string}\r\n */\nexport function getArrayDataType(array, typeOf) {\n  var type; // to hold type info\n  var length = 0; // to hold length value to ensure it has consistent sizes\n\n  for (var i = 0; i < array.length; i++) {\n    var item = array[i];\n    var isArray = Array.isArray(item);\n\n    // Saving the target matrix row size\n    if (i === 0 && isArray) {\n      length = item.length;\n    }\n\n    // If the current item is an array but the length does not equal the targetVectorSize\n    if (isArray && item.length !== length) {\n      return undefined;\n    }\n    var itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array\n    : typeOf(item);\n    if (type === undefined) {\n      type = itemType; // first item\n    } else if (type !== itemType) {\n      return 'mixed';\n    } else {\n      // we're good, everything has the same type so far\n    }\n  }\n  return type;\n}\n\n/**\r\n * Return the last item from an array\r\n * @param array\r\n * @returns {*}\r\n */\nexport function last(array) {\n  return array[array.length - 1];\n}\n\n/**\r\n * Get all but the last element of array.\r\n */\nexport function initial(array) {\n  return array.slice(0, array.length - 1);\n}\n\n/**\r\n * Test whether an array or string contains an item\r\n * @param {Array | string} array\r\n * @param {*} item\r\n * @return {boolean}\r\n */\nexport function contains(array, item) {\n  return array.indexOf(item) !== -1;\n}","map":{"version":3,"names":["isInteger","isNumber","format","DimensionError","IndexError","arraySize","x","s","Array","isArray","push","length","_validate","array","size","dim","i","len","dimNext","child","validate","isScalar","validateIndex","index","TypeError","resize","defaultValue","Error","forEach","value","_defaultValue","undefined","_resize","elem","oldLen","newLen","minLen","Math","min","reshape","sizes","flatArray","flatten","currentLength","processSizesWildcard","newLength","product","_reshape","e","processedSizes","slice","WILDCARD","wildCardIndex","indexOf","isMoreThanOneWildcard","hasWildcard","canReplaceWildcard","reduce","prev","curr","tmpArray","tmpArray2","sizeIndex","squeeze","shift","dims","_squeeze","ii","next","unsqueeze","outer","unshift","_unsqueeze","d","flat","callback","map","prototype","call","filter","filterRegExp","regexp","entry","test","join","separator","identify","a","b","count","identifier","generalize","getArrayDataType","typeOf","type","item","itemType","last","initial","contains"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/utils/array.js"],"sourcesContent":["import { isInteger } from './number.js';\r\nimport { isNumber } from './is.js';\r\nimport { format } from './string.js';\r\nimport { DimensionError } from '../error/DimensionError.js';\r\nimport { IndexError } from '../error/IndexError.js';\r\n\r\n/**\r\n * Calculate the size of a multi dimensional array.\r\n * This function checks the size of the first entry, it does not validate\r\n * whether all dimensions match. (use function `validate` for that)\r\n * @param {Array} x\r\n * @Return {Number[]} size\r\n */\r\nexport function arraySize(x) {\r\n  var s = [];\r\n  while (Array.isArray(x)) {\r\n    s.push(x.length);\r\n    x = x[0];\r\n  }\r\n  return s;\r\n}\r\n\r\n/**\r\n * Recursively validate whether each element in a multi dimensional array\r\n * has a size corresponding to the provided size array.\r\n * @param {Array} array    Array to be validated\r\n * @param {number[]} size  Array with the size of each dimension\r\n * @param {number} dim   Current dimension\r\n * @throws DimensionError\r\n * @private\r\n */\r\nfunction _validate(array, size, dim) {\r\n  var i;\r\n  var len = array.length;\r\n  if (len !== size[dim]) {\r\n    throw new DimensionError(len, size[dim]);\r\n  }\r\n  if (dim < size.length - 1) {\r\n    // recursively validate each child array\r\n    var dimNext = dim + 1;\r\n    for (i = 0; i < len; i++) {\r\n      var child = array[i];\r\n      if (!Array.isArray(child)) {\r\n        throw new DimensionError(size.length - 1, size.length, '<');\r\n      }\r\n      _validate(array[i], size, dimNext);\r\n    }\r\n  } else {\r\n    // last dimension. none of the childs may be an array\r\n    for (i = 0; i < len; i++) {\r\n      if (Array.isArray(array[i])) {\r\n        throw new DimensionError(size.length + 1, size.length, '>');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Validate whether each element in a multi dimensional array has\r\n * a size corresponding to the provided size array.\r\n * @param {Array} array    Array to be validated\r\n * @param {number[]} size  Array with the size of each dimension\r\n * @throws DimensionError\r\n */\r\nexport function validate(array, size) {\r\n  var isScalar = size.length === 0;\r\n  if (isScalar) {\r\n    // scalar\r\n    if (Array.isArray(array)) {\r\n      throw new DimensionError(array.length, 0);\r\n    }\r\n  } else {\r\n    // array\r\n    _validate(array, size, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * Test whether index is an integer number with index >= 0 and index < length\r\n * when length is provided\r\n * @param {number} index    Zero-based index\r\n * @param {number} [length] Length of the array\r\n */\r\nexport function validateIndex(index, length) {\r\n  if (!isNumber(index) || !isInteger(index)) {\r\n    throw new TypeError('Index must be an integer (value: ' + index + ')');\r\n  }\r\n  if (index < 0 || typeof length === 'number' && index >= length) {\r\n    throw new IndexError(index, length);\r\n  }\r\n}\r\n\r\n/**\r\n * Resize a multi dimensional array. The resized array is returned.\r\n * @param {Array} array         Array to be resized\r\n * @param {Array.<number>} size Array with the size of each dimension\r\n * @param {*} [defaultValue=0]  Value to be filled in in new entries,\r\n *                              zero by default. Specify for example `null`,\r\n *                              to clearly see entries that are not explicitly\r\n *                              set.\r\n * @return {Array} array         The resized array\r\n */\r\nexport function resize(array, size, defaultValue) {\r\n  // TODO: add support for scalars, having size=[] ?\r\n\r\n  // check the type of the arguments\r\n  if (!Array.isArray(array) || !Array.isArray(size)) {\r\n    throw new TypeError('Array expected');\r\n  }\r\n  if (size.length === 0) {\r\n    throw new Error('Resizing to scalar is not supported');\r\n  }\r\n\r\n  // check whether size contains positive integers\r\n  size.forEach(function (value) {\r\n    if (!isNumber(value) || !isInteger(value) || value < 0) {\r\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');\r\n    }\r\n  });\r\n\r\n  // recursively resize the array\r\n  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;\r\n  _resize(array, size, 0, _defaultValue);\r\n  return array;\r\n}\r\n\r\n/**\r\n * Recursively resize a multi dimensional array\r\n * @param {Array} array         Array to be resized\r\n * @param {number[]} size       Array with the size of each dimension\r\n * @param {number} dim          Current dimension\r\n * @param {*} [defaultValue]    Value to be filled in in new entries,\r\n *                              undefined by default.\r\n * @private\r\n */\r\nfunction _resize(array, size, dim, defaultValue) {\r\n  var i;\r\n  var elem;\r\n  var oldLen = array.length;\r\n  var newLen = size[dim];\r\n  var minLen = Math.min(oldLen, newLen);\r\n\r\n  // apply new length\r\n  array.length = newLen;\r\n  if (dim < size.length - 1) {\r\n    // non-last dimension\r\n    var dimNext = dim + 1;\r\n\r\n    // resize existing child arrays\r\n    for (i = 0; i < minLen; i++) {\r\n      // resize child array\r\n      elem = array[i];\r\n      if (!Array.isArray(elem)) {\r\n        elem = [elem]; // add a dimension\r\n        array[i] = elem;\r\n      }\r\n      _resize(elem, size, dimNext, defaultValue);\r\n    }\r\n\r\n    // create new child arrays\r\n    for (i = minLen; i < newLen; i++) {\r\n      // get child array\r\n      elem = [];\r\n      array[i] = elem;\r\n\r\n      // resize new child array\r\n      _resize(elem, size, dimNext, defaultValue);\r\n    }\r\n  } else {\r\n    // last dimension\r\n\r\n    // remove dimensions of existing values\r\n    for (i = 0; i < minLen; i++) {\r\n      while (Array.isArray(array[i])) {\r\n        array[i] = array[i][0];\r\n      }\r\n    }\r\n\r\n    // fill new elements with the default value\r\n    for (i = minLen; i < newLen; i++) {\r\n      array[i] = defaultValue;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Re-shape a multi dimensional array to fit the specified dimensions\r\n * @param {Array} array           Array to be reshaped\r\n * @param {Array.<number>} sizes  List of sizes for each dimension\r\n * @returns {Array}               Array whose data has been formatted to fit the\r\n *                                specified dimensions\r\n *\r\n * @throws {DimensionError}       If the product of the new dimension sizes does\r\n *                                not equal that of the old ones\r\n */\r\nexport function reshape(array, sizes) {\r\n  var flatArray = flatten(array);\r\n  var currentLength = flatArray.length;\r\n  if (!Array.isArray(array) || !Array.isArray(sizes)) {\r\n    throw new TypeError('Array expected');\r\n  }\r\n  if (sizes.length === 0) {\r\n    throw new DimensionError(0, currentLength, '!=');\r\n  }\r\n  sizes = processSizesWildcard(sizes, currentLength);\r\n  var newLength = product(sizes);\r\n  if (currentLength !== newLength) {\r\n    throw new DimensionError(newLength, currentLength, '!=');\r\n  }\r\n  try {\r\n    return _reshape(flatArray, sizes);\r\n  } catch (e) {\r\n    if (e instanceof DimensionError) {\r\n      throw new DimensionError(newLength, currentLength, '!=');\r\n    }\r\n    throw e;\r\n  }\r\n}\r\n\r\n/**\r\n * Replaces the wildcard -1 in the sizes array.\r\n * @param {Array.<number>} sizes  List of sizes for each dimension. At most on wildcard.\r\n * @param {number} currentLength  Number of elements in the array.\r\n * @throws {Error}                If more than one wildcard or unable to replace it.\r\n * @returns {Array.<number>}      The sizes array with wildcard replaced.\r\n */\r\nexport function processSizesWildcard(sizes, currentLength) {\r\n  var newLength = product(sizes);\r\n  var processedSizes = sizes.slice();\r\n  var WILDCARD = -1;\r\n  var wildCardIndex = sizes.indexOf(WILDCARD);\r\n  var isMoreThanOneWildcard = sizes.indexOf(WILDCARD, wildCardIndex + 1) >= 0;\r\n  if (isMoreThanOneWildcard) {\r\n    throw new Error('More than one wildcard in sizes');\r\n  }\r\n  var hasWildcard = wildCardIndex >= 0;\r\n  var canReplaceWildcard = currentLength % newLength === 0;\r\n  if (hasWildcard) {\r\n    if (canReplaceWildcard) {\r\n      processedSizes[wildCardIndex] = -currentLength / newLength;\r\n    } else {\r\n      throw new Error('Could not replace wildcard, since ' + currentLength + ' is no multiple of ' + -newLength);\r\n    }\r\n  }\r\n  return processedSizes;\r\n}\r\n\r\n/**\r\n * Computes the product of all array elements.\r\n * @param {Array<number>} array Array of factors\r\n * @returns {number}            Product of all elements\r\n */\r\nfunction product(array) {\r\n  return array.reduce((prev, curr) => prev * curr, 1);\r\n}\r\n\r\n/**\r\n * Iteratively re-shape a multi dimensional array to fit the specified dimensions\r\n * @param {Array} array           Array to be reshaped\r\n * @param {Array.<number>} sizes  List of sizes for each dimension\r\n * @returns {Array}               Array whose data has been formatted to fit the\r\n *                                specified dimensions\r\n */\r\n\r\nfunction _reshape(array, sizes) {\r\n  // testing if there are enough elements for the requested shape\r\n  var tmpArray = array;\r\n  var tmpArray2;\r\n  // for each dimensions starting by the last one and ignoring the first one\r\n  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {\r\n    var size = sizes[sizeIndex];\r\n    tmpArray2 = [];\r\n\r\n    // aggregate the elements of the current tmpArray in elements of the requested size\r\n    var length = tmpArray.length / size;\r\n    for (var i = 0; i < length; i++) {\r\n      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));\r\n    }\r\n    // set it as the new tmpArray for the next loop turn or for return\r\n    tmpArray = tmpArray2;\r\n  }\r\n  return tmpArray;\r\n}\r\n\r\n/**\r\n * Squeeze a multi dimensional array\r\n * @param {Array} array\r\n * @param {Array} [size]\r\n * @returns {Array} returns the array itself\r\n */\r\nexport function squeeze(array, size) {\r\n  var s = size || arraySize(array);\r\n\r\n  // squeeze outer dimensions\r\n  while (Array.isArray(array) && array.length === 1) {\r\n    array = array[0];\r\n    s.shift();\r\n  }\r\n\r\n  // find the first dimension to be squeezed\r\n  var dims = s.length;\r\n  while (s[dims - 1] === 1) {\r\n    dims--;\r\n  }\r\n\r\n  // squeeze inner dimensions\r\n  if (dims < s.length) {\r\n    array = _squeeze(array, dims, 0);\r\n    s.length = dims;\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Recursively squeeze a multi dimensional array\r\n * @param {Array} array\r\n * @param {number} dims Required number of dimensions\r\n * @param {number} dim  Current dimension\r\n * @returns {Array | *} Returns the squeezed array\r\n * @private\r\n */\r\nfunction _squeeze(array, dims, dim) {\r\n  var i, ii;\r\n  if (dim < dims) {\r\n    var next = dim + 1;\r\n    for (i = 0, ii = array.length; i < ii; i++) {\r\n      array[i] = _squeeze(array[i], dims, next);\r\n    }\r\n  } else {\r\n    while (Array.isArray(array)) {\r\n      array = array[0];\r\n    }\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Unsqueeze a multi dimensional array: add dimensions when missing\r\n *\r\n * Paramter `size` will be mutated to match the new, unqueezed matrix size.\r\n *\r\n * @param {Array} array\r\n * @param {number} dims       Desired number of dimensions of the array\r\n * @param {number} [outer]    Number of outer dimensions to be added\r\n * @param {Array} [size] Current size of array.\r\n * @returns {Array} returns the array itself\r\n * @private\r\n */\r\nexport function unsqueeze(array, dims, outer, size) {\r\n  var s = size || arraySize(array);\r\n\r\n  // unsqueeze outer dimensions\r\n  if (outer) {\r\n    for (var i = 0; i < outer; i++) {\r\n      array = [array];\r\n      s.unshift(1);\r\n    }\r\n  }\r\n\r\n  // unsqueeze inner dimensions\r\n  array = _unsqueeze(array, dims, 0);\r\n  while (s.length < dims) {\r\n    s.push(1);\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Recursively unsqueeze a multi dimensional array\r\n * @param {Array} array\r\n * @param {number} dims Required number of dimensions\r\n * @param {number} dim  Current dimension\r\n * @returns {Array | *} Returns the squeezed array\r\n * @private\r\n */\r\nfunction _unsqueeze(array, dims, dim) {\r\n  var i, ii;\r\n  if (Array.isArray(array)) {\r\n    var next = dim + 1;\r\n    for (i = 0, ii = array.length; i < ii; i++) {\r\n      array[i] = _unsqueeze(array[i], dims, next);\r\n    }\r\n  } else {\r\n    for (var d = dim; d < dims; d++) {\r\n      array = [array];\r\n    }\r\n  }\r\n  return array;\r\n}\r\n/**\r\n * Flatten a multi dimensional array, put all elements in a one dimensional\r\n * array\r\n * @param {Array} array   A multi dimensional array\r\n * @return {Array}        The flattened array (1 dimensional)\r\n */\r\nexport function flatten(array) {\r\n  if (!Array.isArray(array)) {\r\n    // if not an array, return as is\r\n    return array;\r\n  }\r\n  var flat = [];\r\n  array.forEach(function callback(value) {\r\n    if (Array.isArray(value)) {\r\n      value.forEach(callback); // traverse through sub-arrays recursively\r\n    } else {\r\n      flat.push(value);\r\n    }\r\n  });\r\n  return flat;\r\n}\r\n\r\n/**\r\n * A safe map\r\n * @param {Array} array\r\n * @param {function} callback\r\n */\r\nexport function map(array, callback) {\r\n  return Array.prototype.map.call(array, callback);\r\n}\r\n\r\n/**\r\n * A safe forEach\r\n * @param {Array} array\r\n * @param {function} callback\r\n */\r\nexport function forEach(array, callback) {\r\n  Array.prototype.forEach.call(array, callback);\r\n}\r\n\r\n/**\r\n * A safe filter\r\n * @param {Array} array\r\n * @param {function} callback\r\n */\r\nexport function filter(array, callback) {\r\n  if (arraySize(array).length !== 1) {\r\n    throw new Error('Only one dimensional matrices supported');\r\n  }\r\n  return Array.prototype.filter.call(array, callback);\r\n}\r\n\r\n/**\r\n * Filter values in a callback given a regular expression\r\n * @param {Array} array\r\n * @param {RegExp} regexp\r\n * @return {Array} Returns the filtered array\r\n * @private\r\n */\r\nexport function filterRegExp(array, regexp) {\r\n  if (arraySize(array).length !== 1) {\r\n    throw new Error('Only one dimensional matrices supported');\r\n  }\r\n  return Array.prototype.filter.call(array, entry => regexp.test(entry));\r\n}\r\n\r\n/**\r\n * A safe join\r\n * @param {Array} array\r\n * @param {string} separator\r\n */\r\nexport function join(array, separator) {\r\n  return Array.prototype.join.call(array, separator);\r\n}\r\n\r\n/**\r\n * Assign a numeric identifier to every element of a sorted array\r\n * @param {Array} a  An array\r\n * @return {Array} An array of objects containing the original value and its identifier\r\n */\r\nexport function identify(a) {\r\n  if (!Array.isArray(a)) {\r\n    throw new TypeError('Array input expected');\r\n  }\r\n  if (a.length === 0) {\r\n    return a;\r\n  }\r\n  var b = [];\r\n  var count = 0;\r\n  b[0] = {\r\n    value: a[0],\r\n    identifier: 0\r\n  };\r\n  for (var i = 1; i < a.length; i++) {\r\n    if (a[i] === a[i - 1]) {\r\n      count++;\r\n    } else {\r\n      count = 0;\r\n    }\r\n    b.push({\r\n      value: a[i],\r\n      identifier: count\r\n    });\r\n  }\r\n  return b;\r\n}\r\n\r\n/**\r\n * Remove the numeric identifier from the elements\r\n * @param {array} a  An array\r\n * @return {array} An array of values without identifiers\r\n */\r\nexport function generalize(a) {\r\n  if (!Array.isArray(a)) {\r\n    throw new TypeError('Array input expected');\r\n  }\r\n  if (a.length === 0) {\r\n    return a;\r\n  }\r\n  var b = [];\r\n  for (var i = 0; i < a.length; i++) {\r\n    b.push(a[i].value);\r\n  }\r\n  return b;\r\n}\r\n\r\n/**\r\n * Check the datatype of a given object\r\n * This is a low level implementation that should only be used by\r\n * parent Matrix classes such as SparseMatrix or DenseMatrix\r\n * This method does not validate Array Matrix shape\r\n * @param {Array} array\r\n * @param {function} typeOf   Callback function to use to determine the type of a value\r\n * @return {string}\r\n */\r\nexport function getArrayDataType(array, typeOf) {\r\n  var type; // to hold type info\r\n  var length = 0; // to hold length value to ensure it has consistent sizes\r\n\r\n  for (var i = 0; i < array.length; i++) {\r\n    var item = array[i];\r\n    var isArray = Array.isArray(item);\r\n\r\n    // Saving the target matrix row size\r\n    if (i === 0 && isArray) {\r\n      length = item.length;\r\n    }\r\n\r\n    // If the current item is an array but the length does not equal the targetVectorSize\r\n    if (isArray && item.length !== length) {\r\n      return undefined;\r\n    }\r\n    var itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array\r\n    : typeOf(item);\r\n    if (type === undefined) {\r\n      type = itemType; // first item\r\n    } else if (type !== itemType) {\r\n      return 'mixed';\r\n    } else {\r\n      // we're good, everything has the same type so far\r\n    }\r\n  }\r\n  return type;\r\n}\r\n\r\n/**\r\n * Return the last item from an array\r\n * @param array\r\n * @returns {*}\r\n */\r\nexport function last(array) {\r\n  return array[array.length - 1];\r\n}\r\n\r\n/**\r\n * Get all but the last element of array.\r\n */\r\nexport function initial(array) {\r\n  return array.slice(0, array.length - 1);\r\n}\r\n\r\n/**\r\n * Test whether an array or string contains an item\r\n * @param {Array | string} array\r\n * @param {*} item\r\n * @return {boolean}\r\n */\r\nexport function contains(array, item) {\r\n  return array.indexOf(item) !== -1;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}