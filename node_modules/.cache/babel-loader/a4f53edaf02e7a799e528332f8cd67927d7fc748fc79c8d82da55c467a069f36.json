{"ast":null,"code":"import { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { xorNumber } from '../../plain/number/index.js';\nvar name = 'xor';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix', 'concat'];\nexport var createXor = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\r\n   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.xor(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.xor(2, 4)   // returns false\r\n   *\r\n   *    a = [2, 0, 0]\r\n   *    b = [2, 7, 0]\r\n   *    c = 0\r\n   *\r\n   *    math.xor(a, b)   // returns [false, true, false]\r\n   *    math.xor(a, c)   // returns [true, false, false]\r\n   *\r\n   * See also:\r\n   *\r\n   *    and, not, or\r\n   *\r\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\r\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\r\n   * @return {boolean | Array | Matrix}\r\n   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\r\n   */\n  return typed(name, {\n    'number, number': xorNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0))\n  }, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});","map":{"version":3,"names":["createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo12xSfs","factory","createMatrixAlgorithmSuite","xorNumber","name","dependencies","createXor","_ref","typed","matrix","DenseMatrix","concat","matAlgo03xDSf","matAlgo07xSSf","matAlgo12xSfs","matrixAlgorithmSuite","ComplexComplex","x","y","re","im","BigNumberBigNumber","isZero","isNaN","referToSelf","self","value","SS","DS","Ss"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/function/logical/xor.js"],"sourcesContent":["import { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\r\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nimport { xorNumber } from '../../plain/number/index.js';\r\nvar name = 'xor';\r\nvar dependencies = ['typed', 'matrix', 'DenseMatrix', 'concat'];\r\nexport var createXor = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    DenseMatrix,\r\n    concat\r\n  } = _ref;\r\n  var matAlgo03xDSf = createMatAlgo03xDSf({\r\n    typed\r\n  });\r\n  var matAlgo07xSSf = createMatAlgo07xSSf({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n\r\n  /**\r\n   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.xor(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.xor(2, 4)   // returns false\r\n   *\r\n   *    a = [2, 0, 0]\r\n   *    b = [2, 7, 0]\r\n   *    c = 0\r\n   *\r\n   *    math.xor(a, b)   // returns [false, true, false]\r\n   *    math.xor(a, c)   // returns [true, false, false]\r\n   *\r\n   * See also:\r\n   *\r\n   *    and, not, or\r\n   *\r\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\r\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\r\n   * @return {boolean | Array | Matrix}\r\n   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\r\n   */\r\n  return typed(name, {\r\n    'number, number': xorNumber,\r\n    'Complex, Complex': function ComplexComplex(x, y) {\r\n      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);\r\n    },\r\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\r\n      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());\r\n    },\r\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0))\r\n  }, matrixAlgorithmSuite({\r\n    SS: matAlgo07xSSf,\r\n    DS: matAlgo03xDSf,\r\n    Ss: matAlgo12xSfs\r\n  }));\r\n});"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,0BAA0B,QAAQ,iDAAiD;AAC5F,SAASC,SAAS,QAAQ,6BAA6B;AACvD,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,CAAC;AAC/D,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,WAAW;IACXC;EACF,CAAC,GAAGJ,IAAI;EACR,IAAIK,aAAa,GAAGd,mBAAmB,CAAC;IACtCU;EACF,CAAC,CAAC;EACF,IAAIK,aAAa,GAAGd,mBAAmB,CAAC;IACtCS,KAAK;IACLE;EACF,CAAC,CAAC;EACF,IAAII,aAAa,GAAGd,mBAAmB,CAAC;IACtCQ,KAAK;IACLE;EACF,CAAC,CAAC;EACF,IAAIK,oBAAoB,GAAGb,0BAA0B,CAAC;IACpDM,KAAK;IACLC,MAAM;IACNE;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOH,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAED,SAAS;IAC3B,kBAAkB,EAAE,SAASa,cAAcA,CAACC,CAAC,EAAEC,CAAC,EAAE;MAChD,OAAO,CAACD,CAAC,CAACE,EAAE,KAAK,CAAC,IAAIF,CAAC,CAACG,EAAE,KAAK,CAAC,OAAOF,CAAC,CAACC,EAAE,KAAK,CAAC,IAAID,CAAC,CAACE,EAAE,KAAK,CAAC,CAAC;IAClE,CAAC;IACD,sBAAsB,EAAE,SAASC,kBAAkBA,CAACJ,CAAC,EAAEC,CAAC,EAAE;MACxD,OAAO,CAAC,CAACD,CAAC,CAACK,MAAM,CAAC,CAAC,IAAI,CAACL,CAAC,CAACM,KAAK,CAAC,CAAC,OAAO,CAACL,CAAC,CAACI,MAAM,CAAC,CAAC,IAAI,CAACJ,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC;IACpE,CAAC;IACD,YAAY,EAAEf,KAAK,CAACgB,WAAW,CAACC,IAAI,IAAI,CAACR,CAAC,EAAEC,CAAC,KAAKO,IAAI,CAACR,CAAC,CAACS,KAAK,IAAI,CAAC,EAAER,CAAC,CAACQ,KAAK,IAAI,CAAC,CAAC;EACpF,CAAC,EAAEX,oBAAoB,CAAC;IACtBY,EAAE,EAAEd,aAAa;IACjBe,EAAE,EAAEhB,aAAa;IACjBiB,EAAE,EAAEf;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}