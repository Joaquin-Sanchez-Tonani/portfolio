{"ast":null,"code":"/**\r\n * Compares two BigNumbers.\r\n * @param {BigNumber} x       First value to compare\r\n * @param {BigNumber} y       Second value to compare\r\n * @param {number} [epsilon]  The maximum relative difference between x and y\r\n *                            If epsilon is undefined or null, the function will\r\n *                            test whether x and y are exactly equal.\r\n * @return {boolean} whether the two numbers are nearly equal\r\n */\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x.eq(y);\n  }\n\n  // use \"==\" operator, handles infinities\n  if (x.eq(y)) {\n    return true;\n  }\n\n  // NaN\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  }\n\n  // at this point x and y should be finite\n  if (x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n    if (diff.isZero()) {\n      return true;\n    } else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  }\n\n  // Infinite and Number or negative Infinite and positive Infinite cases\n  return false;\n}","map":{"version":3,"names":["nearlyEqual","x","y","epsilon","undefined","eq","isNaN","isFinite","diff","minus","abs","isZero","max","constructor","lte","times"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js"],"sourcesContent":["/**\r\n * Compares two BigNumbers.\r\n * @param {BigNumber} x       First value to compare\r\n * @param {BigNumber} y       Second value to compare\r\n * @param {number} [epsilon]  The maximum relative difference between x and y\r\n *                            If epsilon is undefined or null, the function will\r\n *                            test whether x and y are exactly equal.\r\n * @return {boolean} whether the two numbers are nearly equal\r\n */\r\nexport function nearlyEqual(x, y, epsilon) {\r\n  // if epsilon is null or undefined, test whether x and y are exactly equal\r\n  if (epsilon === null || epsilon === undefined) {\r\n    return x.eq(y);\r\n  }\r\n\r\n  // use \"==\" operator, handles infinities\r\n  if (x.eq(y)) {\r\n    return true;\r\n  }\r\n\r\n  // NaN\r\n  if (x.isNaN() || y.isNaN()) {\r\n    return false;\r\n  }\r\n\r\n  // at this point x and y should be finite\r\n  if (x.isFinite() && y.isFinite()) {\r\n    // check numbers are very close, needed when comparing numbers near zero\r\n    var diff = x.minus(y).abs();\r\n    if (diff.isZero()) {\r\n      return true;\r\n    } else {\r\n      // use relative error\r\n      var max = x.constructor.max(x.abs(), y.abs());\r\n      return diff.lte(max.times(epsilon));\r\n    }\r\n  }\r\n\r\n  // Infinite and Number or negative Infinite and positive Infinite cases\r\n  return false;\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,WAAWA,CAACC,CAAC,EAAEC,CAAC,EAAEC,OAAO,EAAE;EACzC;EACA,IAAIA,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAKC,SAAS,EAAE;IAC7C,OAAOH,CAAC,CAACI,EAAE,CAACH,CAAC,CAAC;EAChB;;EAEA;EACA,IAAID,CAAC,CAACI,EAAE,CAACH,CAAC,CAAC,EAAE;IACX,OAAO,IAAI;EACb;;EAEA;EACA,IAAID,CAAC,CAACK,KAAK,CAAC,CAAC,IAAIJ,CAAC,CAACI,KAAK,CAAC,CAAC,EAAE;IAC1B,OAAO,KAAK;EACd;;EAEA;EACA,IAAIL,CAAC,CAACM,QAAQ,CAAC,CAAC,IAAIL,CAAC,CAACK,QAAQ,CAAC,CAAC,EAAE;IAChC;IACA,IAAIC,IAAI,GAAGP,CAAC,CAACQ,KAAK,CAACP,CAAC,CAAC,CAACQ,GAAG,CAAC,CAAC;IAC3B,IAAIF,IAAI,CAACG,MAAM,CAAC,CAAC,EAAE;MACjB,OAAO,IAAI;IACb,CAAC,MAAM;MACL;MACA,IAAIC,GAAG,GAAGX,CAAC,CAACY,WAAW,CAACD,GAAG,CAACX,CAAC,CAACS,GAAG,CAAC,CAAC,EAAER,CAAC,CAACQ,GAAG,CAAC,CAAC,CAAC;MAC7C,OAAOF,IAAI,CAACM,GAAG,CAACF,GAAG,CAACG,KAAK,CAACZ,OAAO,CAAC,CAAC;IACrC;EACF;;EAEA;EACA,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}