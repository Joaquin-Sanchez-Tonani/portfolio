{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { roundNumber } from '../../plain/number/index.js';\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport var createRound = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n\n  /**\r\n   * Round a value towards the nearest rounded value.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.round(x)\r\n   *    math.round(x, n)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.round(3.22)             // returns number 3\r\n   *    math.round(3.82)             // returns number 4\r\n   *    math.round(-4.2)             // returns number -4\r\n   *    math.round(-4.7)             // returns number -5\r\n   *    math.round(3.22, 1)          // returns number 3.2\r\n   *    math.round(3.88, 1)          // returns number 3.9\r\n   *    math.round(-4.21, 1)         // returns number -4.2\r\n   *    math.round(-4.71, 1)         // returns number -4.7\r\n   *    math.round(math.pi, 3)       // returns number 3.142\r\n   *    math.round(123.45678, 2)     // returns number 123.46\r\n   *\r\n   *    const c = math.complex(3.2, -2.7)\r\n   *    math.round(c)                // returns Complex 3 - 3i\r\n   *\r\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\r\n   *\r\n   * See also:\r\n   *\r\n   *    ceil, fix, floor\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\r\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\r\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\r\n   */\n  return typed(name, {\n    number: roundNumber,\n    'number, number': roundNumber,\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      var _n = n.toNumber();\n      return x.round(_n);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n.toNumber());\n    },\n    // deep map collection, skip zeros since round(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n    }),\n    'number | Complex | BigNumber | Fraction, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo12xSfs(y, x, self, true);\n    }),\n    'number | Complex | BigNumber | Fraction, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    }),\n    'number | Complex | BigNumber | Fraction, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n    })\n  });\n});","map":{"version":3,"names":["factory","deepMap","createMatAlgo11xS0s","createMatAlgo12xSfs","createMatAlgo14xDs","roundNumber","NO_INT","name","dependencies","createRound","_ref","typed","matrix","equalScalar","zeros","BigNumber","DenseMatrix","matAlgo11xS0s","matAlgo12xSfs","matAlgo14xDs","number","numberBigNumber","x","n","isInteger","TypeError","toDecimalPlaces","toNumber","Complex","round","ComplexNumber","ComplexBigNumber","_n","BigNumberBigNumber","Fraction","FractionNumber","FractionBigNumber","referToSelf","self","y","valueOf","size","storage"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/function/arithmetic/round.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\r\nimport { roundNumber } from '../../plain/number/index.js';\r\nvar NO_INT = 'Number of decimals in function round must be an integer';\r\nvar name = 'round';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\r\nexport var createRound = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    zeros,\r\n    BigNumber,\r\n    DenseMatrix\r\n  } = _ref;\r\n  var matAlgo11xS0s = createMatAlgo11xS0s({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matAlgo14xDs = createMatAlgo14xDs({\r\n    typed\r\n  });\r\n\r\n  /**\r\n   * Round a value towards the nearest rounded value.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.round(x)\r\n   *    math.round(x, n)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.round(3.22)             // returns number 3\r\n   *    math.round(3.82)             // returns number 4\r\n   *    math.round(-4.2)             // returns number -4\r\n   *    math.round(-4.7)             // returns number -5\r\n   *    math.round(3.22, 1)          // returns number 3.2\r\n   *    math.round(3.88, 1)          // returns number 3.9\r\n   *    math.round(-4.21, 1)         // returns number -4.2\r\n   *    math.round(-4.71, 1)         // returns number -4.7\r\n   *    math.round(math.pi, 3)       // returns number 3.142\r\n   *    math.round(123.45678, 2)     // returns number 123.46\r\n   *\r\n   *    const c = math.complex(3.2, -2.7)\r\n   *    math.round(c)                // returns Complex 3 - 3i\r\n   *\r\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\r\n   *\r\n   * See also:\r\n   *\r\n   *    ceil, fix, floor\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\r\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\r\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\r\n   */\r\n  return typed(name, {\r\n    number: roundNumber,\r\n    'number, number': roundNumber,\r\n    'number, BigNumber': function numberBigNumber(x, n) {\r\n      if (!n.isInteger()) {\r\n        throw new TypeError(NO_INT);\r\n      }\r\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.round();\r\n    },\r\n    'Complex, number': function ComplexNumber(x, n) {\r\n      if (n % 1) {\r\n        throw new TypeError(NO_INT);\r\n      }\r\n      return x.round(n);\r\n    },\r\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\r\n      if (!n.isInteger()) {\r\n        throw new TypeError(NO_INT);\r\n      }\r\n      var _n = n.toNumber();\r\n      return x.round(_n);\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.toDecimalPlaces(0);\r\n    },\r\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\r\n      if (!n.isInteger()) {\r\n        throw new TypeError(NO_INT);\r\n      }\r\n      return x.toDecimalPlaces(n.toNumber());\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return x.round();\r\n    },\r\n    'Fraction, number': function FractionNumber(x, n) {\r\n      if (n % 1) {\r\n        throw new TypeError(NO_INT);\r\n      }\r\n      return x.round(n);\r\n    },\r\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\r\n      if (!n.isInteger()) {\r\n        throw new TypeError(NO_INT);\r\n      }\r\n      return x.round(n.toNumber());\r\n    },\r\n    // deep map collection, skip zeros since round(0) = 0\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\r\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\r\n      return matAlgo11xS0s(x, y, self, false);\r\n    }),\r\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\r\n      return matAlgo14xDs(x, y, self, false);\r\n    }),\r\n    'Array, number | BigNumber': typed.referToSelf(self => (x, y) => {\r\n      // use matrix implementation\r\n      return matAlgo14xDs(matrix(x), y, self, false).valueOf();\r\n    }),\r\n    'number | Complex | BigNumber | Fraction, SparseMatrix': typed.referToSelf(self => (x, y) => {\r\n      // check scalar is zero\r\n      if (equalScalar(x, 0)) {\r\n        // do not execute algorithm, result will be a zero matrix\r\n        return zeros(y.size(), y.storage());\r\n      }\r\n      return matAlgo12xSfs(y, x, self, true);\r\n    }),\r\n    'number | Complex | BigNumber | Fraction, DenseMatrix': typed.referToSelf(self => (x, y) => {\r\n      // check scalar is zero\r\n      if (equalScalar(x, 0)) {\r\n        // do not execute algorithm, result will be a zero matrix\r\n        return zeros(y.size(), y.storage());\r\n      }\r\n      return matAlgo14xDs(y, x, self, true);\r\n    }),\r\n    'number | Complex | BigNumber | Fraction, Array': typed.referToSelf(self => (x, y) => {\r\n      // use matrix implementation\r\n      return matAlgo14xDs(matrix(y), x, self, true).valueOf();\r\n    })\r\n  });\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}