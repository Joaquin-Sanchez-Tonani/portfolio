{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { absNumber } from '../../plain/number/index.js';\nvar name = 'abs';\nvar dependencies = ['typed'];\nexport var createAbs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Calculate the absolute value of a number. For matrices, the function is\r\n   * evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.abs(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.abs(3.5)                // returns number 3.5\r\n   *    math.abs(-4.2)               // returns number 4.2\r\n   *\r\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\r\n   *\r\n   * See also:\r\n   *\r\n   *    sign\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\r\n   *            A number or matrix for which to get the absolute value\r\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\r\n   *            Absolute value of `x`\r\n   */\n  return typed(name, {\n    number: absNumber,\n    'Complex | BigNumber | Fraction | Unit': x => x.abs(),\n    // deep map collection, skip zeros since abs(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true))\n  });\n});","map":{"version":3,"names":["factory","deepMap","absNumber","name","dependencies","createAbs","_ref","typed","number","x","abs","referToSelf","self"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/function/arithmetic/abs.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { absNumber } from '../../plain/number/index.js';\r\nvar name = 'abs';\r\nvar dependencies = ['typed'];\r\nexport var createAbs = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Calculate the absolute value of a number. For matrices, the function is\r\n   * evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.abs(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.abs(3.5)                // returns number 3.5\r\n   *    math.abs(-4.2)               // returns number 4.2\r\n   *\r\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\r\n   *\r\n   * See also:\r\n   *\r\n   *    sign\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\r\n   *            A number or matrix for which to get the absolute value\r\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\r\n   *            Absolute value of `x`\r\n   */\r\n  return typed(name, {\r\n    number: absNumber,\r\n    'Complex | BigNumber | Fraction | Unit': x => x.abs(),\r\n    // deep map collection, skip zeros since abs(0) = 0\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true))\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,SAAS,QAAQ,6BAA6B;AACvD,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAEN,SAAS;IACjB,uCAAuC,EAAEO,CAAC,IAAIA,CAAC,CAACC,GAAG,CAAC,CAAC;IACrD;IACA,gBAAgB,EAAEH,KAAK,CAACI,WAAW,CAACC,IAAI,IAAIH,CAAC,IAAIR,OAAO,CAACQ,CAAC,EAAEG,IAAI,EAAE,IAAI,CAAC;EACzE,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}