{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { addNumber } from '../../plain/number/index.js';\nvar name = 'addScalar';\nvar dependencies = ['typed'];\nexport var createAddScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Add two scalar values, `x + y`.\r\n   * This function is meant for internal use: it is used by the public function\r\n   * `add`\r\n   *\r\n   * This function does not support collections (Array or Matrix).\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\r\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\r\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\r\n   * @private\r\n   */\n  return typed(name, {\n    'number, number': addNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (x.value === null || x.value === undefined) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n      if (y.value === null || y.value === undefined) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    })\n  });\n});","map":{"version":3,"names":["factory","addNumber","name","dependencies","createAddScalar","_ref","typed","ComplexComplex","x","y","add","BigNumberBigNumber","plus","FractionFraction","referToSelf","self","value","undefined","Error","equalBase","res","clone","find","valueType","fixPrefix"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/function/arithmetic/addScalar.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { addNumber } from '../../plain/number/index.js';\r\nvar name = 'addScalar';\r\nvar dependencies = ['typed'];\r\nexport var createAddScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Add two scalar values, `x + y`.\r\n   * This function is meant for internal use: it is used by the public function\r\n   * `add`\r\n   *\r\n   * This function does not support collections (Array or Matrix).\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\r\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\r\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\r\n   * @private\r\n   */\r\n  return typed(name, {\r\n    'number, number': addNumber,\r\n    'Complex, Complex': function ComplexComplex(x, y) {\r\n      return x.add(y);\r\n    },\r\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\r\n      return x.plus(y);\r\n    },\r\n    'Fraction, Fraction': function FractionFraction(x, y) {\r\n      return x.add(y);\r\n    },\r\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\r\n      if (x.value === null || x.value === undefined) {\r\n        throw new Error('Parameter x contains a unit with undefined value');\r\n      }\r\n      if (y.value === null || y.value === undefined) {\r\n        throw new Error('Parameter y contains a unit with undefined value');\r\n      }\r\n      if (!x.equalBase(y)) throw new Error('Units do not match');\r\n      var res = x.clone();\r\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\r\n      res.fixPrefix = false;\r\n      return res;\r\n    })\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,QAAQ,6BAA6B;AACvD,IAAIC,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,eAAe,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC9E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAED,SAAS;IAC3B,kBAAkB,EAAE,SAASM,cAAcA,CAACC,CAAC,EAAEC,CAAC,EAAE;MAChD,OAAOD,CAAC,CAACE,GAAG,CAACD,CAAC,CAAC;IACjB,CAAC;IACD,sBAAsB,EAAE,SAASE,kBAAkBA,CAACH,CAAC,EAAEC,CAAC,EAAE;MACxD,OAAOD,CAAC,CAACI,IAAI,CAACH,CAAC,CAAC;IAClB,CAAC;IACD,oBAAoB,EAAE,SAASI,gBAAgBA,CAACL,CAAC,EAAEC,CAAC,EAAE;MACpD,OAAOD,CAAC,CAACE,GAAG,CAACD,CAAC,CAAC;IACjB,CAAC;IACD,YAAY,EAAEH,KAAK,CAACQ,WAAW,CAACC,IAAI,IAAI,CAACP,CAAC,EAAEC,CAAC,KAAK;MAChD,IAAID,CAAC,CAACQ,KAAK,KAAK,IAAI,IAAIR,CAAC,CAACQ,KAAK,KAAKC,SAAS,EAAE;QAC7C,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;MACrE;MACA,IAAIT,CAAC,CAACO,KAAK,KAAK,IAAI,IAAIP,CAAC,CAACO,KAAK,KAAKC,SAAS,EAAE;QAC7C,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;MACrE;MACA,IAAI,CAACV,CAAC,CAACW,SAAS,CAACV,CAAC,CAAC,EAAE,MAAM,IAAIS,KAAK,CAAC,oBAAoB,CAAC;MAC1D,IAAIE,GAAG,GAAGZ,CAAC,CAACa,KAAK,CAAC,CAAC;MACnBD,GAAG,CAACJ,KAAK,GAAGV,KAAK,CAACgB,IAAI,CAACP,IAAI,EAAE,CAACK,GAAG,CAACG,SAAS,CAAC,CAAC,EAAEd,CAAC,CAACc,SAAS,CAAC,CAAC,CAAC,CAAC,CAACH,GAAG,CAACJ,KAAK,EAAEP,CAAC,CAACO,KAAK,CAAC;MAClFI,GAAG,CAACI,SAAS,GAAG,KAAK;MACrB,OAAOJ,GAAG;IACZ,CAAC;EACH,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}