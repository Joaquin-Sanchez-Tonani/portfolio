{"ast":null,"code":"import { clone, mapObject, deepExtend } from '../../utils/object.js';\nimport { DEFAULT_CONFIG } from '../config.js';\nexport var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\nexport var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\nexport function configFactory(config, emit) {\n  /**\r\n   * Set configuration options for math.js, and get current options.\r\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\r\n   *\r\n   * This function is only available on a mathjs instance created using `create`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.config(config: Object): Object\r\n   *\r\n   * Examples:\r\n   *\r\n   *\r\n   *     import { create, all } from 'mathjs'\r\n   *\r\n   *     // create a mathjs instance\r\n   *     const math = create(all)\r\n   *\r\n   *     math.config().number                // outputs 'number'\r\n   *     math.evaluate('0.4')                // outputs number 0.4\r\n   *     math.config({number: 'Fraction'})\r\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\r\n   *\r\n   * @param {Object} [options] Available options:\r\n   *                            {number} epsilon\r\n   *                              Minimum relative difference between two\r\n   *                              compared values, used by all comparison functions.\r\n   *                            {string} matrix\r\n   *                              A string 'Matrix' (default) or 'Array'.\r\n   *                            {string} number\r\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\r\n   *                            {number} precision\r\n   *                              The number of significant digits for BigNumbers.\r\n   *                              Not applicable for Numbers.\r\n   *                            {string} parenthesis\r\n   *                              How to display parentheses in LaTeX and string\r\n   *                              output.\r\n   *                            {string} randomSeed\r\n   *                              Random seed for seeded pseudo random number generator.\r\n   *                              Set to null to randomly seed.\r\n   * @return {Object} Returns the current configuration\r\n   */\n  function _config(options) {\n    if (options) {\n      var prev = mapObject(config, clone);\n\n      // validate some of the options\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\n      validateOption(options, 'number', NUMBER_OPTIONS);\n\n      // merge options\n      deepExtend(config, options);\n      var curr = mapObject(config, clone);\n      var changes = mapObject(options, clone);\n\n      // emit 'config' event\n      emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return mapObject(config, clone);\n    }\n  }\n\n  // attach the valid options to the function so they can be extended\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS;\n\n  // attach the config properties as readonly properties to the config function\n  Object.keys(DEFAULT_CONFIG).forEach(key => {\n    Object.defineProperty(_config, key, {\n      get: () => config[key],\n      enumerable: true,\n      configurable: true\n    });\n  });\n  return _config;\n}\n\n/**\r\n * Test whether an Array contains a specific item.\r\n * @param {Array.<string>} array\r\n * @param {string} item\r\n * @return {boolean}\r\n */\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n\n/**\r\n * Validate an option\r\n * @param {Object} options         Object with options\r\n * @param {string} name            Name of the option to validate\r\n * @param {Array.<string>} values  Array with valid values for this option\r\n */\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    // unknown value\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(value => JSON.stringify(value)).join(', ') + '.');\n  }\n}","map":{"version":3,"names":["clone","mapObject","deepExtend","DEFAULT_CONFIG","MATRIX_OPTIONS","NUMBER_OPTIONS","configFactory","config","emit","_config","options","prev","validateOption","curr","changes","Object","keys","forEach","key","defineProperty","get","enumerable","configurable","contains","array","item","indexOf","name","values","undefined","console","warn","map","value","JSON","stringify","join"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/core/function/config.js"],"sourcesContent":["import { clone, mapObject, deepExtend } from '../../utils/object.js';\r\nimport { DEFAULT_CONFIG } from '../config.js';\r\nexport var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\r\nexport var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\r\n\r\nexport function configFactory(config, emit) {\r\n  /**\r\n   * Set configuration options for math.js, and get current options.\r\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\r\n   *\r\n   * This function is only available on a mathjs instance created using `create`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.config(config: Object): Object\r\n   *\r\n   * Examples:\r\n   *\r\n   *\r\n   *     import { create, all } from 'mathjs'\r\n   *\r\n   *     // create a mathjs instance\r\n   *     const math = create(all)\r\n   *\r\n   *     math.config().number                // outputs 'number'\r\n   *     math.evaluate('0.4')                // outputs number 0.4\r\n   *     math.config({number: 'Fraction'})\r\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\r\n   *\r\n   * @param {Object} [options] Available options:\r\n   *                            {number} epsilon\r\n   *                              Minimum relative difference between two\r\n   *                              compared values, used by all comparison functions.\r\n   *                            {string} matrix\r\n   *                              A string 'Matrix' (default) or 'Array'.\r\n   *                            {string} number\r\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\r\n   *                            {number} precision\r\n   *                              The number of significant digits for BigNumbers.\r\n   *                              Not applicable for Numbers.\r\n   *                            {string} parenthesis\r\n   *                              How to display parentheses in LaTeX and string\r\n   *                              output.\r\n   *                            {string} randomSeed\r\n   *                              Random seed for seeded pseudo random number generator.\r\n   *                              Set to null to randomly seed.\r\n   * @return {Object} Returns the current configuration\r\n   */\r\n  function _config(options) {\r\n    if (options) {\r\n      var prev = mapObject(config, clone);\r\n\r\n      // validate some of the options\r\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\r\n      validateOption(options, 'number', NUMBER_OPTIONS);\r\n\r\n      // merge options\r\n      deepExtend(config, options);\r\n      var curr = mapObject(config, clone);\r\n      var changes = mapObject(options, clone);\r\n\r\n      // emit 'config' event\r\n      emit('config', curr, prev, changes);\r\n      return curr;\r\n    } else {\r\n      return mapObject(config, clone);\r\n    }\r\n  }\r\n\r\n  // attach the valid options to the function so they can be extended\r\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\r\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS;\r\n\r\n  // attach the config properties as readonly properties to the config function\r\n  Object.keys(DEFAULT_CONFIG).forEach(key => {\r\n    Object.defineProperty(_config, key, {\r\n      get: () => config[key],\r\n      enumerable: true,\r\n      configurable: true\r\n    });\r\n  });\r\n  return _config;\r\n}\r\n\r\n/**\r\n * Test whether an Array contains a specific item.\r\n * @param {Array.<string>} array\r\n * @param {string} item\r\n * @return {boolean}\r\n */\r\nfunction contains(array, item) {\r\n  return array.indexOf(item) !== -1;\r\n}\r\n\r\n/**\r\n * Validate an option\r\n * @param {Object} options         Object with options\r\n * @param {string} name            Name of the option to validate\r\n * @param {Array.<string>} values  Array with valid values for this option\r\n */\r\nfunction validateOption(options, name, values) {\r\n  if (options[name] !== undefined && !contains(values, options[name])) {\r\n    // unknown value\r\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(value => JSON.stringify(value)).join(', ') + '.');\r\n  }\r\n}"],"mappings":"AAAA,SAASA,KAAK,EAAEC,SAAS,EAAEC,UAAU,QAAQ,uBAAuB;AACpE,SAASC,cAAc,QAAQ,cAAc;AAC7C,OAAO,IAAIC,cAAc,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;AACjD,OAAO,IAAIC,cAAc,GAAG,CAAC,QAAQ,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;;AAEjE,OAAO,SAASC,aAAaA,CAACC,MAAM,EAAEC,IAAI,EAAE;EAC1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASC,OAAOA,CAACC,OAAO,EAAE;IACxB,IAAIA,OAAO,EAAE;MACX,IAAIC,IAAI,GAAGV,SAAS,CAACM,MAAM,EAAEP,KAAK,CAAC;;MAEnC;MACAY,cAAc,CAACF,OAAO,EAAE,QAAQ,EAAEN,cAAc,CAAC;MACjDQ,cAAc,CAACF,OAAO,EAAE,QAAQ,EAAEL,cAAc,CAAC;;MAEjD;MACAH,UAAU,CAACK,MAAM,EAAEG,OAAO,CAAC;MAC3B,IAAIG,IAAI,GAAGZ,SAAS,CAACM,MAAM,EAAEP,KAAK,CAAC;MACnC,IAAIc,OAAO,GAAGb,SAAS,CAACS,OAAO,EAAEV,KAAK,CAAC;;MAEvC;MACAQ,IAAI,CAAC,QAAQ,EAAEK,IAAI,EAAEF,IAAI,EAAEG,OAAO,CAAC;MACnC,OAAOD,IAAI;IACb,CAAC,MAAM;MACL,OAAOZ,SAAS,CAACM,MAAM,EAAEP,KAAK,CAAC;IACjC;EACF;;EAEA;EACAS,OAAO,CAACL,cAAc,GAAGA,cAAc;EACvCK,OAAO,CAACJ,cAAc,GAAGA,cAAc;;EAEvC;EACAU,MAAM,CAACC,IAAI,CAACb,cAAc,CAAC,CAACc,OAAO,CAACC,GAAG,IAAI;IACzCH,MAAM,CAACI,cAAc,CAACV,OAAO,EAAES,GAAG,EAAE;MAClCE,GAAG,EAAEA,CAAA,KAAMb,MAAM,CAACW,GAAG,CAAC;MACtBG,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE;IAChB,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAOb,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASc,QAAQA,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC7B,OAAOD,KAAK,CAACE,OAAO,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASb,cAAcA,CAACF,OAAO,EAAEiB,IAAI,EAAEC,MAAM,EAAE;EAC7C,IAAIlB,OAAO,CAACiB,IAAI,CAAC,KAAKE,SAAS,IAAI,CAACN,QAAQ,CAACK,MAAM,EAAElB,OAAO,CAACiB,IAAI,CAAC,CAAC,EAAE;IACnE;IACAG,OAAO,CAACC,IAAI,CAAC,0BAA0B,GAAGrB,OAAO,CAACiB,IAAI,CAAC,GAAG,8BAA8B,GAAGA,IAAI,GAAG,KAAK,GAAG,qBAAqB,GAAGC,MAAM,CAACI,GAAG,CAACC,KAAK,IAAIC,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;EAChM;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}