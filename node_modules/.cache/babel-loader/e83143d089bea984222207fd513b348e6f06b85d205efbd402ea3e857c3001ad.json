{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isNaNNumber } from '../../plain/number/index.js';\nvar name = 'isNaN';\nvar dependencies = ['typed'];\nexport var createIsNaN = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Test whether a value is NaN (not a number).\r\n   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isNaN(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isNaN(3)                     // returns false\r\n   *    math.isNaN(NaN)                   // returns true\r\n   *    math.isNaN(0)                     // returns false\r\n   *    math.isNaN(math.bignumber(NaN))   // returns true\r\n   *    math.isNaN(math.bignumber(0))     // returns false\r\n   *    math.isNaN(math.fraction(-2, 5))  // returns false\r\n   *    math.isNaN('-2')                  // returns false\r\n   *    math.isNaN([2, 0, -3, NaN])       // returns [false, false, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isNegative, isPositive, isZero, isInteger\r\n   *\r\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\r\n   * @return {boolean}  Returns true when `x` is NaN.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\n  return typed(name, {\n    number: isNaNNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return false;\n    },\n    Complex: function Complex(x) {\n      return x.isNaN();\n    },\n    Unit: function Unit(x) {\n      return Number.isNaN(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, Number.isNaN);\n    }\n  });\n});","map":{"version":3,"names":["deepMap","factory","isNaNNumber","name","dependencies","createIsNaN","_ref","typed","number","BigNumber","x","isNaN","Fraction","Complex","Unit","Number","value","ArrayMatrix"],"sources":["C:/Users/Joaquin Sanchez/React/portolio new/portfolio/node_modules/mathjs/lib/esm/function/utils/isNaN.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { isNaNNumber } from '../../plain/number/index.js';\r\nvar name = 'isNaN';\r\nvar dependencies = ['typed'];\r\nexport var createIsNaN = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Test whether a value is NaN (not a number).\r\n   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isNaN(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isNaN(3)                     // returns false\r\n   *    math.isNaN(NaN)                   // returns true\r\n   *    math.isNaN(0)                     // returns false\r\n   *    math.isNaN(math.bignumber(NaN))   // returns true\r\n   *    math.isNaN(math.bignumber(0))     // returns false\r\n   *    math.isNaN(math.fraction(-2, 5))  // returns false\r\n   *    math.isNaN('-2')                  // returns false\r\n   *    math.isNaN([2, 0, -3, NaN])       // returns [false, false, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isNegative, isPositive, isZero, isInteger\r\n   *\r\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\r\n   * @return {boolean}  Returns true when `x` is NaN.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\r\n  return typed(name, {\r\n    number: isNaNNumber,\r\n    BigNumber: function BigNumber(x) {\r\n      return x.isNaN();\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return false;\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.isNaN();\r\n    },\r\n    Unit: function Unit(x) {\r\n      return Number.isNaN(x.value);\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, Number.isNaN);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,WAAW,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC1E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAEN,WAAW;IACnBO,SAAS,EAAE,SAASA,SAASA,CAACC,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACC,KAAK,CAAC,CAAC;IAClB,CAAC;IACDC,QAAQ,EAAE,SAASA,QAAQA,CAACF,CAAC,EAAE;MAC7B,OAAO,KAAK;IACd,CAAC;IACDG,OAAO,EAAE,SAASA,OAAOA,CAACH,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACC,KAAK,CAAC,CAAC;IAClB,CAAC;IACDG,IAAI,EAAE,SAASA,IAAIA,CAACJ,CAAC,EAAE;MACrB,OAAOK,MAAM,CAACJ,KAAK,CAACD,CAAC,CAACM,KAAK,CAAC;IAC9B,CAAC;IACD,gBAAgB,EAAE,SAASC,WAAWA,CAACP,CAAC,EAAE;MACxC,OAAOV,OAAO,CAACU,CAAC,EAAEK,MAAM,CAACJ,KAAK,CAAC;IACjC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}